<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>Client side rendering</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child{border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active,#footnotes .footnote a:first-of-type:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Client side rendering</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#lesson_overview">Lesson overview</a>
<ul class="sectlevel2">
<li><a href="#chapter_source_files">Source files</a></li>
</ul>
</li>
<li><a href="#groundwork_movie_items">Groundwork: movie items</a>
<ul class="sectlevel2">
<li><a href="#movie_content_type">Movie content type</a></li>
<li><a href="#react_components">React components</a></li>
<li><a href="#controller_mapping">Controller mapping</a></li>
<li><a href="#make_some_movies">Make some Movies</a></li>
</ul>
</li>
<li><a href="#static_movie_list">Static movie list</a>
<ul class="sectlevel2">
<li><a href="#guillotine_helpers">Guillotine helpers and usage</a></li>
<li><a href="#included_helper_guillotineapi_ts">Included helper: guillotineApi.ts</a></li>
<li><a href="#domain_specific_helper_for_listing_movies">Domain-specific helper for listing movies</a></li>
<li><a href="#part_controller">Part controller</a></li>
<li><a href="#static_movielist">React components</a></li>
<li><a href="#render_the_list">Render the list</a></li>
</ul>
</li>
<li><a href="#making_the_list_dynamic">Making the list dynamic</a>
<ul class="sectlevel2">
<li><a href="#expose_api">Exposing the guillotine API</a></li>
<li><a href="#guillotine_request_helper">Included helper: guillotineRequest.ts</a></li>
<li><a href="#frontend_guillotine_request">Frontend guillotine request</a></li>
<li><a href="#dynamic_dom_updates">Dynamic DOM updates</a></li>
<li><a href="#scroll_listener">Scroll listener</a></li>
</ul>
</li>
<li><a href="#other_resources_and_tools">Other resources and tools</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>We will now look at how to use React4xp in combination with XP&#8217;s graphQL api.</p>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
This chapter is currently based on the deprecated Guillotine library. We are working on updating it.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="lesson_overview"><a class="link" href="#lesson_overview">Lesson overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This chapter will focus on setting up the API and the first usages:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>set up a content type and react visualization for single movie items,</p>
</li>
<li>
<p>making <strong>a graphQL query</strong> for content data in a regular XP controller,</p>
</li>
<li>
<p>using React4xp to <strong>visualize that data</strong>,</p>
</li>
<li>
<p>letting the rendered components make <strong>the same query from the frontend</strong>,</p>
</li>
<li>
<p>and use react to dynamically render a visualization of the returned data, and this way fill in more content as we scroll down the page: an <strong>"infinite scroller"</strong> page.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The <a href="standalone.ahtml">next chapter</a> will expand on this lesson. It demonstrates more decoupled (and less XP-centric) ways to use these same React4xp components in a <em>standalone webapp</em>, to render content data from a guillotine API.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="chapter_source_files"><a class="link" href="#chapter_source_files">Source files</a></h3>
<div class="listingblock">
<div class="title">Files involved (src/main/resources/&#8230;&#8203;):</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">react4xp/
    myEntries/                  <i class="conum" data-value="1"></i><b>(1)</b>
        Movie.tsx
        MovieList.tsx
        MovieList.scss
    shared/
        Movie.tsx
        Movie.scss

site/
    content-types
        /movie/
            movie.xml           <i class="conum" data-value="2"></i><b>(2)</b>
    parts/
        movie-list/
            movie-list.ts       <i class="conum" data-value="3"></i><b>(3)</b>
            movie-list.xml
    site.xml                    <i class="conum" data-value="4"></i><b>(4)</b>

controllers/
    previewMovie.ts             <i class="conum" data-value="5"></i><b>(5)</b>

headless/                       <i class="conum" data-value="6"></i><b>(6)</b>
    helpers/
        movieListRequests.ts
    guillotineApi.ts
    guillotineRequest.ts</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>We&#8217;re going to build a site which is a list of movies, each displayed with a poster and a bit of info. The <strong>entries</strong> <em>Movie</em> and <em>MovieList</em> both import a <em>shared/Movie</em> component. The <em>Movie</em> entry uses it to preview a single movie item inside Content Studio, while the <em>MovieList</em> entry displays the actual movie list site, by iterating over multiple <em>movie</em> data items and using the <em>shared/Movie</em> component for visualizing each item (both in a serverside-rendered and headless context).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A content type for a single <em>movie</em>,</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A part with a controller that fetches child content items of the <em>movie</em> content type, and renders them into MovieList,</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>In <em>site.xml</em> we will set up controller mappings for both the guillotine API and&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>&#8230;&#8203;the single-movie preview controller: displays a single movie without needing to set up a template and a part.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td><em>guillotineApi.ts</em> is the actual API to guillotine. It can run graphQL queries both from XP controllers and through received HTTP requests. And <em>guillotineRequest.ts</em> simplifies making such a request from the browser. Both of these are general-purpose and come with the starter (since version 1.1.0). But <em>helpers/movieListRequests.ts</em> contains helper functions specific to the lesson site we&#8217;re building here: it helps with building a query for fetching movie-list data, and parsing the returned data into the <code>props</code> format that the <em>Movie</em> component needs. These helpers are also used on both frontend and backend.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="groundwork_movie_items"><a class="link" href="#groundwork_movie_items">Groundwork: movie items</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This first stage should be easy enough, almost entirely repeating steps you&#8217;ve been through in previous chapters. We&#8217;ll make a <em>movie</em> content type, set up React4xp to preview-render it with react components (but with <a href="#controller_mapping">a little twist</a>), and add some movie items that will be listed when the site is done.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This entire chapter builds on the <a href="../imports-and-dependency-chunks.ahtml#webpack_config">config setup from the previous lesson</a>: <em>react4xp.config.js</em>, <em>webpack.config.react4xp.js</em> and the extra NPM packages should be set up like that.</p>
</div>
<div class="paragraph">
<p>If you haven&#8217;t completed that section already, better take a couple of minutes and do that before proceeding.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="movie_content_type"><a class="link" href="#movie_content_type">Movie content type</a></h3>
<div class="paragraph">
<p>When the setup is ready, we&#8217;ll start by adding a <em>movie</em> <strong>content type</strong>, with an ImageSelector for a poster <code>image</code>, a simple TextArea with a movie <code>description</code>, a numeral Long field for adding the release <code>year</code> and an array of <code>actor</code> names:</p>
</div>
<div class="listingblock">
<div class="title">site/content-types/movie/movie.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;content-type&gt;
  &lt;display-name&gt;Movie&lt;/display-name&gt;
  &lt;description&gt;Moving images often reflecting culture&lt;/description&gt;
  &lt;super-type&gt;base:structured&lt;/super-type&gt;

  &lt;form&gt;
    &lt;input name="image" type="ImageSelector"&gt;
        &lt;label&gt;Movie poster&lt;/label&gt;
        &lt;occurrences minimum="1" maximum="1"/&gt;
    &lt;/input&gt;

    &lt;input name="description" type="TextArea"&gt;
        &lt;label&gt;Description&lt;/label&gt;
    &lt;/input&gt;

    &lt;input name="year" type="Long"&gt;
        &lt;label&gt;Release year&lt;/label&gt;
        &lt;occurrences minimum="1" maximum="1"/&gt;
    &lt;/input&gt;

    &lt;input name="actor" type="TextLine"&gt;
        &lt;label&gt;Actor&lt;/label&gt;
        &lt;occurrences minimum="0" maximum="0"/&gt;
    &lt;/input&gt;
  &lt;/form&gt;
&lt;/content-type&gt;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="react_components"><a class="link" href="#react_components">React components</a></h3>
<div class="paragraph">
<p>Next, we&#8217;ll set up a few react components for visualizing each movie item.</p>
</div>
<div class="paragraph">
<p>The <strong>entry</strong>, <em>Movie.tsx</em>, will take care of rendering a preview of each movie content item in content studio later:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/Movie.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import React from 'react'

import Movie from '../shared/Movie';

export default (props) =&gt; &lt;Movie {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is a pure entry wrapper that just imports the next react component from <em>react4xp/shared</em>.</p>
</div>
<div class="paragraph">
<p>Why import code from <em>shared</em> instead of keeping it all in the entry? Firstly, it&#8217;s a good rule of thumb to keep entries slim, for better optimization. And secondly, in addition to a Content Studio preview for single movies, we&#8217;re going to use the <strong>imported components</strong> in the actual movie list too, for each single movie in the list. This way, the preview in Content Studio will always directly reflect what&#8217;s displayed on the final page, because it&#8217;s the same code that&#8217;s used everywhere:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/shared/Movie.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import React from 'react'

import './Movie.scss';

const Cast = ({actors}) =&gt; (
    &lt;ul className="cast"&gt;
        { actors.map( actor =&gt; &lt;li key={actor} className="actor"&gt;{actor}&lt;/li&gt; ) }
    &lt;/ul&gt;
);


const Info = ({heading, children}) =&gt; (
    &lt;div className="info"&gt;
        {heading ? &lt;h3&gt;{heading}&lt;/h3&gt; : null}
        {children}
    &lt;/div&gt;
);


const InfoContainer = ({title, year, description, actors}) =&gt; (
    &lt;div className="infoContainer"&gt;
        &lt;h2 className="title"&gt;{title}&lt;/h2&gt;

        &lt;Info heading="Released"&gt;
            &lt;p className="year"&gt;{year}&lt;/p&gt;
        &lt;/Info&gt;

        &lt;Info heading="Description"&gt;
            &lt;div className="description"&gt;{description}&lt;/div&gt;
        &lt;/Info&gt;

        { (actors &amp;&amp; actors.length &gt; 0) ?
            &lt;Info heading="Cast"&gt;
                &lt;Cast actors={actors} /&gt;
            &lt;/Info&gt; :
            null
        }
    &lt;/div&gt;
);

const Movie = ({imageUrl, title, description, year, actors}) =&gt; (
    &lt;div className="movie"&gt;
        &lt;img className="poster"
             src={imageUrl}
             alt={`Movie poster: ${title}`}
             title={`Movie poster: ${title}`}/&gt;

        &lt;InfoContainer title={title}
                       year={year}
                       description={description}
                       actors={actors}
        /&gt;
    &lt;/div&gt;
);

export default Movie;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Not a lot of functionality here, just a TSX file that contains some structural units nested inside each other: the exported root level in the component, <code>Movie</code>, contains a movie poster image, and nests an <code>InfoContainer</code> component that displays the rest of the movie data. There, each movie data section is wrapped in an <code>Info</code> component (which just displays a header), and finally each actor name is mapped out in a list in the <code>Cast</code> component.</p>
</div>
<div class="paragraph">
<p>Take a moment to note the <strong>props signature</strong> of <em>Movie.tsx</em>. <code>Movie</code> clearly expects the <code>imageUrl</code> prop to be a URL, so we&#8217;ll need to handle the <code>image</code> field from the content type. The props <code>description</code>, <code>title</code> and <code>year</code> are expected to be simple strings, but <code>actors</code> should be handled as a string array. As you&#8217;ll see, we&#8217;ll make sure that each data readout of a movie item is adapted to this signature.</p>
</div>
<div class="paragraph">
<p>Moving on, <em>Movie.tsx</em> also imports some <strong>styling</strong> that&#8217;ll be handled by webpack the same way as in <a href="../imports-and-dependency-chunks.ahtml#webpack_rules">the previous chapter</a>:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/shared/Movie.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">html, body {
  margin: 0; padding: 0;
}

.infoContainer {
  flex-grow: 1; flex-basis: content; padding: 0; margin: 0;

  * {
    font-family: 'DejaVu Sans', Arial, Helvetica, sans-serif; color: #444;
  }

  h2, h3 {
    padding: 0; margin: 0; color: #0c0c0c;
  }

  h2 {
    font-size: 34px;
  }

  p {
    padding: 0; margin: 10px 0 0 0;
  }
}

.info {
  margin: 0; padding: 30px 0 0 0;
}


.movie {
  margin: 0; padding: 30px; box-sizing: border-box; width: 100%; display: flex; flex-flow: row nowrap; justify-content: flex-start; align-items: flex-start;
}

.poster {
  width: 300px; max-width: 30%; margin-right: 30px; flex: 0 1 auto;
}

.cast {
  list-style-type: none; margin: 0; padding: 0;

  .actor {
    width: 100%; padding: 0; margin: 10px 0 0 0;
  }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="controller_mapping"><a class="link" href="#controller_mapping">Controller mapping</a></h3>
<div class="paragraph">
<p>Here comes a little variation: in this example, we want to connect a movie content item to with the rendering of the <em>Movie.tsx</em> entry. But we don&#8217;t want to mess around with setting up a <a href="../pages-parts-and-regions.ahtml#page_template_setup">template with a part</a> the way we&#8217;ve done so far. Instead, we can use a <a href="https://developer.enonic.com/docs/xp/stable/framework/mappings">controller mapping</a> to make that connection in code.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s open <em>site.xml</em> and add a mapping:</p>
</div>
<div class="listingblock">
<div class="title">site/site.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;site&gt;
  &lt;form/&gt;
  &lt;mappings&gt;

    &lt;!-- Add this... --&gt;
    &lt;mapping controller="/controllers/previewMovie.js" order="50"&gt;
        &lt;match&gt;type:'com.enonic.app.react4xp:movie'&lt;/match&gt;
    &lt;/mapping&gt;
    &lt;!-- ...and that's it. --&gt;

  &lt;/mappings&gt;
&lt;/site&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, every <em>movie</em> content item in Content Studio is always rendered with a particular controller: <em>/controllers/previewMovie.js</em>.</p>
</div>
<div class="paragraph">
<p>Two important points when using a controller mapping like this:</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>First, the controller reference in a mapping in <em>site.xml</em> must always refer to <strong>the runtime name of the controller</strong>. In our case, the source file of our controller is <em>/controllers/previewMovie</em> <strong><em>.ts</em></strong>, but at compile time, this is compiled into <strong><em>.js</em></strong> which is used at XP runtime.</p>
</div>
<div class="paragraph">
<p>Second, controller mappings use qualified content type names that have <strong>the name of the app</strong> in it: <code>com.enonic.app.react4xp</code>. If/when you use a different name for your app, make sure to update content type references like this, e.g. <code>&lt;match&gt;type:'my.awesome.app:movie'&lt;/match&gt;</code></p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Now, with that mapping set up, we can add the <em>previewMovie</em> controller:</p>
</div>
<div class="listingblock">
<div class="title">controllers/previewMovie.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');

const forceArray = maybeArray =&gt; {
    if (Array.isArray(maybeArray)) {
        return maybeArray;
    }
    return (maybeArray) ? [maybeArray] : [];
};

export function get(request) {
    const content = portal.getContent();            <i class="conum" data-value="1"></i><b>(1)</b>

    const props = {
        imageUrl: content.data.image ?
            portal.imageUrl({                       <i class="conum" data-value="2"></i><b>(2)</b>
                id: content.data.image,
                scale: 'width(300)'
            }) :
            undefined,
        title: content.displayName,
        description: content.data.description,
        year: content.data.year,
        actors: forceArray( content.data.actor )   <i class="conum" data-value="3"></i><b>(3)</b>
            .map( actor =&gt; (actor || '').trim())
            .filter(actor =&gt; !!actor)
    };

    const id = content._id;                         <i class="conum" data-value="4"></i><b>(4)</b>

    const output = React4xp.render(
        'Movie',                                    <i class="conum" data-value="5"></i><b>(5)</b>
        props,
        request,
        {
            id,
                                                    <i class="conum" data-value="6"></i><b>(6)</b>
            body: `
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;meta charset="UTF-8" /&gt;
                        &lt;title&gt;${content.displayName}&lt;/title&gt;
                    &lt;/head&gt;
                    &lt;body class="xp-page"&gt;
                        &lt;div id="${id}"&gt;&lt;/div&gt;
                    &lt;/body&gt;
                &lt;/html&gt;
            `
        }
    );

    output.body = '&lt;!DOCTYPE html&gt;' + output.body;  <i class="conum" data-value="7"></i><b>(7)</b>

    return output;
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>After the previous chapters, not much in this controller should come as a surprise, but a quick overview anyway:</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>We use <code>getContent</code> to fetch the movie item data as usual (later, we&#8217;ll use guillotine in a similar fashion. This doesn&#8217;t matter as long as the props are constructed according to the signature of <em>Movie.tsx</em>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>image</code> comes from an ImageSelector and is just an image item ID, so we use <code>imageUrl</code> to get the URL that the prop signature expects.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Normalizing the <code>actor</code> data to guarantee that it&#8217;s an array.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td><code>React4xp.render</code> needs a unique ID to target a container in the surrounding <code>body</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td><code>"Movie"</code> is of course the <a href="../appendix/jsxpath.ahtml">jsxPath</a> reference to the entry, <em>react4xp/myEntries/Movie.tsx</em>.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This controller is the only one triggered for rendering <em>movie</em> items. That means that the <code>body</code> that the rendering is inserted into, has to be a <strong>full root HTML document</strong> including a <code>&lt;head&gt;</code> section (or otherwise React4xp won&#8217;t know where to put the rendered page contributions, and the component won&#8217;t work properly).</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Workaround for a current <a href="https://github.com/enonic/lib-react4xp/issues/107">inconvenient bug</a>.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="make_some_movies"><a class="link" href="#make_some_movies">Make some Movies</a></h3>
<div class="paragraph">
<p>With all this in place, we&#8217;re about to finish the groundwork stage: let&#8217;s add some <em>movie</em> content items to list.</p>
</div>
<div class="paragraph">
<p><a href="../hello-react.ahtml#first_setup_render">Build the project as usual and start XP</a>.</p>
</div>
<div class="paragraph">
<p>Create a site content item and connect it to your app. Create some new Movie items:</p>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/edit_movie.png" alt="edit movie" width="1024px" title="Create a new movie item in content studio"></span></p>
</div>
<div id="movies_in_container_site" class="paragraph">
<p>It&#8217;s important that <strong>the new movies are inside/under <em>one common container item</em> in the content hierarchy</strong>. It&#8217;s easiest for this lesson if the movie items are just directly under the site itself:</p>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/add_movies.png" alt="add movies" width="1024px" title="Create some movie items to list, under the site"></span></p>
</div>
<div class="paragraph">
<p>When you mark/preview the site itself, you&#8217;ll see no visualization yet. But previewing each movie item should now work as in the image above.</p>
</div>
<div class="paragraph">
<p>Now we&#8217;re ready to move on to more interesting stuff, using the content and code we just made.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="static_movie_list"><a class="link" href="#static_movie_list">Static movie list</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Next, we&#8217;ll make a page controller for a site item that displays a static list of the <em>movie</em> items below it. The controller will use a configurable guillotine query to fetch an array of movie data items.</p>
</div>
<div class="sect2">
<h3 id="guillotine_helpers"><a class="link" href="#guillotine_helpers">Guillotine helpers and usage</a></h3>
<div class="paragraph">
<p>First off, an introduction to the guillotine helpers at we&#8217;ll be using. Two of them -  <em>headless/guillotineApi.ts</em> and  <em>headless/guillotineRequests.ts</em> - are general-purpose helpers <strong>included in the React4xp starter</strong>, and the third one we&#8217;ll write next.</p>
</div>
</div>
<div class="sect2">
<h3 id="included_helper_guillotineapi_ts"><a class="link" href="#included_helper_guillotineapi_ts">Included helper: guillotineApi.ts</a></h3>
<div class="paragraph">
<p>The most central of the helpers and the first one we&#8217;ll use, is <strong><em>headless/guillotineApi.ts</em></strong>. If we strip away a little boilerplate, the bare essence of it looks like this:</p>
</div>
<div class="listingblock">
<div class="title">headless/guillotineApi.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">// @ts-expect-error No types for /lib/guillotine yet.
import {createSchema, execute} from '/lib/guillotine';

const SCHEMA = createSchema();


// ----------------------------------------------  FOR USE IN CONTROLLERS:    ------------------------------------

export const executeQuery = (query, variables) =&gt; execute({
  query: query,
  variables: variables,
  schema: SCHEMA
});

// Expose and use in POST requests from frontend:
export const post = req =&gt; {                             <i class="conum" data-value="3"></i><b>(3)</b>
  const {
    query,
    variables
  } = JSON.parse(req.body);

  return {
    contentType: 'application/json',
    body: executeQuery(query, variables),
    status: 200
  };
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>At the core is the function <code>executeQuery</code>. Here, a guillotine <code>SCHEMA</code> definition is combined with a graphQL <code>query</code> string and an optional <code>variables</code> object. These are used with XP&#8217;s graphQL library to <code>execute</code> the query. The result, a JSON object, is returned.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>executeQuery</code> is exposed and directly usable from an XP controller. That&#8217;s what we&#8217;ll do next.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>a <code>post</code> function is also included for receiving POST requests from outside, e.g. a browser. If these requests contain a query string, it&#8217;s executed with <code>executeQuery</code> above, and the result is returned in a response: basically a complete guillotine API endpoint for your webapp.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This endpoint is <strong>disabled by default</strong> in the starter, to encourage developers to consider security aspects before using it. We&#8217;ll get back to that, and activate it, <a href="#expose_api">later</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The second included helper, <a href="#guillotine_request_helper">guillotineRequest.ts</a>, is a <code>fetch</code> wrapper to simplify guillotine requests at the frontend. We&#8217;ll take a look at that later.</p>
</div>
</div>
<div class="sect2">
<h3 id="domain_specific_helper_for_listing_movies"><a class="link" href="#domain_specific_helper_for_listing_movies">Domain-specific helper for listing movies</a></h3>
<div class="paragraph">
<p>In order to make requests for a list of movies below a container item in the content hierarchy, we&#8217;ll need a specific guillotine query string, as well as functionality to adapt the resulting data into the proper props structure for the react components.</p>
</div>
<div class="paragraph">
<p>And by using the same code on the frontend and backend, for this too, we gain a bit of isomorphism (the predictability of a single source of truth, in short). So we&#8217;ll make <strong>a module with custom helper functionality</strong> for our use case, and import from it in both places.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s go ahead an write this:</p>
</div>
<div id="movielistrequests" class="listingblock">
<div class="title">headless/helpers/movieListRequests.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">// Used by both backend and frontend (the movie-list part controller, and react4xp/entries/MovieList.jsx)

<i class="conum" data-value="1"></i><b>(1)</b>
export const buildQueryListMovies = () =&gt; `
query(
    $first:Int!,
    $offset:Int!,
    $sort:String!,
    $parentPathQuery:String!
) {
  guillotine {
    query(
        contentTypes: ["com.enonic.app.samples_react4xp:movie"],
        query: $parentPathQuery,
        first: $first,
        offset: $offset,
        sort: $sort
    ) {
      ... on com_enonic_app_samples_react4xp_Movie {
        _id
        displayName
        data {
          year
          description
          actor
          image {
            ... on media_Image {
              imageUrl(type: absolute, scale: "width(300)")
            }
          }
        }
      }
    }
  }
}`;

<i class="conum" data-value="2"></i><b>(2)</b>
export const buildParentPathQuery = (parentPath) =&gt; `_parentPath = '/content${parentPath}'`;


// Returns arrays unchanged.
// If the maybeArray arg is a non-array value, wraps it in a single-item array.
// If arg is falsy, returns an empty array.
const forceArray = maybeArray =&gt; {
    if (Array.isArray(maybeArray)) {
        return maybeArray;
    }
    return (maybeArray) ? [maybeArray] : [];
};

<i class="conum" data-value="3"></i><b>(3)</b>
// Adapts the output from the guillotine query to the MovieList props signature
export const extractMovieArray = responseData =&gt; responseData.data.guillotine.query
    .filter( movieItem =&gt; movieItem &amp;&amp; typeof movieItem === 'object' &amp;&amp; Object.keys(movieItem).indexOf('data') !== -1)
    .map(
        movieItem =&gt; ({
            id: movieItem._id,
            title: movieItem.displayName.trim(),
            imageUrl: movieItem.data.image.imageUrl,
            year: movieItem.data.year,
            description: movieItem.data.description,
            actors: forceArray(movieItem.data.actor)
                .map( actor =&gt; (actor || '').trim())
                .filter(actor =&gt; !!actor)
        })
    );

export default {};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The function <code>buildQueryListMovies</code> returns a string: a <strong>guillotine query</strong> ready to use in the API. Colloquially, you can read this query in 3 parts:
<div class="ulist">
<ul>
<li>
<p>The parenthesis after the first <code>query</code> declares some parameters that are required (hence the <code>!</code>) as values in a <code>variables</code> object together with the query.</p>
</li>
<li>
<p>In the parenthesis after the second <code>query</code>, those <code>variables</code> values are used: this query will list a certain number (<code>$first</code>) of movie items (<code>contentTypes: ["com.enonic.app.react4xp:movie"]</code>), starting at index number <code>$offset</code>, and sort them using the sort expression string <code>$sort</code>. It narrows down the search by nesting a second and specifying query expression <code>$parentPathQuery</code>, that tells guillotine to only look below a certain parent path in the content hierarchy - see below (2.).</p>
</li>
<li>
<p>The last major block, <code>&#8230;&#8203; on com_enonic_app_react4xp_Movie {</code>, asks for a selection of sub-data from each found movie item: <code>_id</code>, <code>displayName</code>, <code>data.year</code>, etc. Note the second <code>&#8230;&#8203; on media_Image</code> block nested inside it: instead of returning the ID value in the <code>data.image</code> field, we pass that through an <code>imageUrl</code> function that gives us a finished <code>data.imageUrl</code> field instead - directly and in one single query.</p>
<div class="paragraph">
<p>For more about guillotine queries, see the <a href="https://developer.enonic.com/docs/guillotine/stable/api">guillotine API documentation</a>.</p>
</div>
</li>
</ul>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The function <code>buildParentPathQuery</code> returns a <strong>sub-query string</strong> needed to only search below the content path of a container item: the parameter <code>$parentPathQuery</code> in the main query string (1.), inserted through the <code>variables</code> object.
<div class="paragraph">
<p>In <a href="#movies_in_container_site">the example above</a>, the site <em>MovieSite</em> is the item that contains the movies, and the content hierarchy in Content Studio shows us that <em>MovieSite</em> has the content path <code>/moviesite</code>. So the sub-query that directs guillotine to only search for movies below that parent item, can be made like this: <code>buildParentPathQuery('/moviesite')</code>.</p>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The function <code>extractMovieArray</code> takes the data object of a full guillotine search result and adapts it to the data structure that matches the props structure of our react components: an array of objects, where each object is a movie item.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Remember that this query hardcodes qualified names to a content type, that contain the name of the app: <code>com.enonic.app.react4xp:movie</code> and <code>com_enonic_app_react4xp_Movie</code>. If your app name is not <code>com.enonic.app.react4xp</code>, you&#8217;ll need to change these.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="part_controller"><a class="link" href="#part_controller">Part controller</a></h3>
<div class="paragraph">
<p>Armed with these helpers, we can build an XP part controller that runs a guillotine query, extracts movie props from it, and renders a list of movies. We can even let the part&#8217;s config control how the movies are listed:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/movie-list/movie-list.xml</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;part&gt;
    &lt;display-name&gt;Movie List&lt;/display-name&gt;
    &lt;description&gt;View a list of movies&lt;/description&gt;
    &lt;form&gt;

        &lt;input name="movieCount" type="Long"&gt;
            &lt;label&gt;Number of movies to display&lt;/label&gt;
            &lt;occurrences minimum="1" maximum="1"/&gt;
            &lt;config/&gt;
            &lt;default&gt;5&lt;/default&gt;
        &lt;/input&gt;

        &lt;input name="sortBy" type="RadioButton"&gt;
            &lt;label&gt;Sort movies by...&lt;/label&gt;
            &lt;occurrences minimum="1" maximum="1"/&gt;
            &lt;config&gt;
                &lt;option value="displayName"&gt;Title&lt;/option&gt;
                &lt;option value="data.year"&gt;Release year&lt;/option&gt;
                &lt;option value="createdTime"&gt;Date added to this db&lt;/option&gt;
            &lt;/config&gt;
            &lt;default&gt;createdTime&lt;/default&gt;
        &lt;/input&gt;

        &lt;input  name="descending" type="CheckBox"&gt;
            &lt;label&gt;... in descending (reversed) order&lt;/label&gt;
        &lt;/input&gt;
    &lt;/form&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div id="movie-list-part-controller" class="paragraph">
<p>The actual controller:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/movie-list/movie-list.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import type {PartComponent} from '@enonic-types/core';

import {toStr} from '@enonic/js-utils/value/toStr';
import {
  getComponent,
  getContent,
  getSite
} from '/lib/xp/portal';
import {render} from '/lib/enonic/react4xp';
import {executeQuery} from '/headless/guillotineApi';      <i class="conum" data-value="1"></i><b>(1)</b>
import {
  buildQueryListMovies,
  buildParentPathQuery,
  extractMovieArray
} from '/headless/helpers/movieListRequests';


declare global {
  interface XpPartMap {
    ['com.enonic.app.samples-react4xp:movie-list']: {
      descending?: boolean
      movieCount: number
      sortBy?: 'displayName'|'data.year'|'createdTime'
    }
  }
}

type MovieListComponent = PartComponent&lt;'com.enonic.app.samples-react4xp:movie-list'&gt;


const ENTRY = 'MovieList';
// const ENTRY = 'MovieList2';
// const ENTRY = 'MovieList3';
// const ENTRY = 'MovieList4';


export function get(request) {
  const content = getContent();
  const component = getComponent&lt;MovieListComponent&gt;();
  const {
    descending = false,
    movieCount = 0,
    sortBy = 'createdTime'
  } = component.config;

  const sortExpression = `${sortBy} ${                     <i class="conum" data-value="2"></i><b>(2)</b>
      descending ? 'DESC' : 'ASC'
  }`;

  const query = buildQueryListMovies();                    <i class="conum" data-value="3"></i><b>(3)</b>

  const variables = {                                      <i class="conum" data-value="4"></i><b>(4)</b>
    first: movieCount,
    offset: 0,
    sort: sortExpression,
    parentPathQuery: buildParentPathQuery(content._path)
  };

  const guillotineResult = executeQuery(query, variables); <i class="conum" data-value="5"></i><b>(5)</b>
  log.info('guillotineResult: %s', toStr(guillotineResult));

  const movies = extractMovieArray(guillotineResult);      <i class="conum" data-value="6"></i><b>(6)</b>

  return render(
    ENTRY,
    {                                                      <i class="conum" data-value="7"></i><b>(7)</b>
      movies,
      apiUrl: `./${getSite()._path}/api/headless`,
      parentPath: content._path,
      movieCount: component.config.movieCount,
      sortExpression
    },
    request
  );
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the functionality from the helpers that were <a href="#guillotine_helpers">just described</a>,</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Use the part&#8217;s config to build a sort expression for the query,</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Get the query string,</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Build the <code>variables</code> object with the query&#8217;s parameters (what&#8217;s up with a variable called <code>variables</code>, you ask? This is for consistencty - the guillotine lib and its docs refer to the encapsulated object of values for the various variables in the query, as an argument called <code>variables</code>. Now we have <em>that</em> clarified),</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Execute the query string with the variables in the guillotine API,</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Extract <code>movies</code> props (an array of objects with the same signature as the props for <em>Movie.tsx</em>) from the result of the query,</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Render a <em>MovieList</em> entry with the <code>movies</code> props (as well as some additional props that we will need later for making the same guillotine query from the frontend. Especially note the <code>apiUrl</code> prop: this is basically just the URL to the site itself, with <code>/api/headless</code> appended to it. When we later <a href="#expose_api">expose the guillotine API</a> to the frontend, this is the URL to the API - specifically, the POST method in <em>guillotineApi.ts</em>).</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="static_movielist"><a class="link" href="#static_movielist">React components</a></h3>
<div class="paragraph">
<p>We&#8217;re still missing that <strong><em>MovieList</em> entry</strong> that will display the list of movie items:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/MovieList.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import React from 'react'

import './MovieList.scss';

import Movie from "../shared/Movie";

const MovieList = ({movies, apiUrl, parentPath, movieCount, sortExpression}) =&gt; {

    return (
        &lt;div className="movieList"&gt;
            {movies
                ? movies.map(movie =&gt;
                        &lt;Movie key={movie.id} {...movie} /&gt;
                    )
                : null
            }
        &lt;/div&gt;
    );
};

// MUST use this export line wrapping, because of a useState hook later.
export default (props) =&gt; &lt;MovieList {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The only notable things here:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A lot of the props aren&#8217;t used yet, just the <code>movies</code> array. The rest of the props are a preparation for later.</p>
</li>
<li>
<p>Each item object in the array in <code>movies</code> is just mapped onto an imported <em>shared/Movie.tsx</em> component: the same react component that&#8217;s used to render the movie previews in Content Studio.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Most of the styling is already handled at the single-movie level, so just a minimum of extra <strong>list styling</strong> is needed:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/MovieList.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">.movieList {
  margin: 0 auto; width: 1024px; max-width: 100%;

  .movie {
    border-bottom: 1px dotted #ccc;
  }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="render_the_list"><a class="link" href="#render_the_list">Render the list</a></h3>
<div class="paragraph">
<p>We can now set up the parent site with the movies, with a <em>movie-list</em> part. Rebuild the app, enter/refresh Content Studio, and make the <em>movie-list</em> part handle the visualization of the <em>MovieSite</em> item.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
You can either do that <a href="../pages-parts-and-regions.ahtml#adding_parts_to_new_content">with a template as before</a> to render <em>all</em> sites with this part controller. Or better, edit <em>MovieSite</em> directly  and add the <em>movie-list</em> part to the region there, the same way as when adding a part to the region of a template. With this last direct-edit approach, only <em>MovieSite</em> will be rendered like this; other sites won&#8217;t.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Correctly set up, you can now select the list in the edit panel, and a part config panel will appear on the right. <strong>Edit the config fields to control the guillotine query</strong>: how many movies should be rendered, and in what order?</p>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/movie-list-part-config.png" alt="movie list part config" width="1024px" title="Edit the movie-list part configuration to control the guillotine query"></span></p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
As usual, click Preview to see the rendering in a tab of its own. A preview browser tab, with the page inspector and server log open on the side, is also the best starting point to hunt down bugs in the visualization.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="making_the_list_dynamic"><a class="link" href="#making_the_list_dynamic">Making the list dynamic</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this next section we&#8217;ll expose the API to the frontend and let the client send a request to it. The returned data will be merged into the component state of the <em>MovieList</em> entry, and used to render the new movies into the page DOM. Finally, we&#8217;ll add a scroll listener to trigger the process.</p>
</div>
<div class="sect2">
<h3 id="expose_api"><a class="link" href="#expose_api">Exposing the guillotine API</a></h3>
<div class="paragraph">
<p>The <code>post</code> method in the included <em>guillotineApi.ts</em> is nearly ready to use. All it needs to be activated for API requests from outside, is a controller mapping. We&#8217;ll add that next to the mapping <a href="#controller_mapping">we&#8217;ve already added</a>.</p>
</div>
<div class="paragraph">
<p>But first, a word of caution about doing this in other projects:</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>In the included form from the React4xp starter, <em>guillotineAPI.ts</em> is as bare-bone as it gets, and primarily meant as a stepping stone for developers to expand from.</p>
</div>
<div class="paragraph">
<p>Guillotine is a read-only interface, but still: after adding the controller mapping to an unchanged <em>guillotineAPI.ts</em>, it&#8217;s opened to receiving and <strong>executing any guillotine query</strong> from the frontend, technically exposing any data from the content repo to being read.</p>
</div>
<div class="paragraph">
<p>Before using it in production, <strong>it&#8217;s highly recommended to implement your own security measures</strong> in/around <em>guillotineAPI.ts</em>. For example authorization/permissions-checking/filtering what data is available/keeping the actual query string on the backend and only exposing the <code>variables</code> object, etc - depending on your environment and use case.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>For the purpose of running this lesson on your localhost, though, it should be perfectly fine. Enter <em>site.xml</em> again to add the controller mapping:</p>
</div>
<div class="listingblock">
<div class="title">site/site.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;site&gt;
  &lt;form/&gt;
    &lt;mappings&gt;
        &lt;mapping controller="/controllers/previewMovie.js" order="50"&gt;
            &lt;match&gt;type:'com.enonic.app.react4xp:movie'&lt;/match&gt;
        &lt;/mapping&gt;

        &lt;!-- Add this... --&gt;
        &lt;mapping controller="/headless/guillotineApi.js" order="50"&gt;
            &lt;pattern&gt;/api/headless&lt;/pattern&gt;
        &lt;/mapping&gt;
        &lt;!-- ...to expose the API.  --&gt;

    &lt;/mappings&gt;
&lt;/site&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>After rebuilding, the API is now up and running at <code>&lt;site-url&gt;/api/headless</code> (e.g. <code><a href="http://localhost:8080/admin/site/preview/default/draft/moviesite/api/headless" class="bare">http://localhost:8080/admin/site/preview/default/draft/moviesite/api/headless</a></code>).</p>
</div>
</div>
<div class="sect2">
<h3 id="guillotine_request_helper"><a class="link" href="#guillotine_request_helper">Included helper: guillotineRequest.ts</a></h3>
<div class="paragraph">
<p>Time to add some code to the existing <em>MovieList.tsx</em> so it can fetch data from the guillotine endpoint. To easily get started with that, we&#8217;ll use the second helper module <strong>included in the react4xp starter</strong>: <em>headless/guillotineRequest.ts</em>
(the first of the two helpers is of course <a href="#guillotine_helpers">guillotineApi.ts</a>).</p>
</div>
<div class="paragraph">
<p>This too has some convenience error handling and boilerplate like default parameter values/functions, but if we skip that, the bare essence is a <code>fetch</code> wrapper:</p>
</div>
<div class="listingblock">
<div class="title">headless/guillotineRequest.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">const doGuillotineRequest = ({
  url,                        <i class="conum" data-value="1"></i><b>(1)</b>
  query,                      <i class="conum" data-value="2"></i><b>(2)</b>
  variables,                  <i class="conum" data-value="3"></i><b>(3)</b>
  handleResponseErrorFunc,    <i class="conum" data-value="4"></i><b>(4)</b>
  extractDataFunc,            <i class="conum" data-value="5"></i><b>(5)</b>
  handleDataFunc,             <i class="conum" data-value="6"></i><b>(6)</b>
  catchErrorsFunc             <i class="conum" data-value="7"></i><b>(7)</b>
}) =&gt; {

  fetch(
      url,
      {
          method: "POST",
          body: JSON.stringify({
              query,
              variables}
          ),
          credentials: "same-origin",
      }
  )
      .then(handleResponseErrorFunc)
      .then(response =&gt; response.json())
      .then(extractDataFunc)
      .then(handleDataFunc)
      .catch(catchErrorsFunc)
};

export default doGuillotineRequest;</code></pre>
</div>
</div>
<div class="paragraph">
<p>In short, run <code>doGuillotineRequest(params)</code> where <code>params</code> is an object that has at least a <code>.url</code> and a <code>.query</code> attribute (and optional <code>.variables</code>), and it will send the query to the guillotine API and handle the returned data (or errors). How that&#8217;s handled is up to callbacks in <code>params</code>.</p>
</div>
<div class="paragraph">
<p><strong>Full <code>params</code> specs are:</strong></p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>url</code> (string, mandatory): URL to the API endpoint, i.e. to the controller mapping of <code>headless/guillotineApi.ts</code>: <code>&lt;site-url&gt;/api/headless</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>query</code> (string, mandatory): Must be a valid Guillotine query.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>variables</code> (object, optional): corresponds to the guillotine <code>variables</code> object: key-value pairs where the keys correspond to parameters in the <code>query</code> string. E.g. the value of <code>variables.first</code> will be inserted into the query string as <code>$first</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td><code>handleResponseErrorFunc</code> (function, optional): callback function that takes a response object and returns it, usually after having checked the response for errors and handled that. Default: just checks <code>response.status</code> for HTTP codes other than OK and throws any problems as <code>Error</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td><code>extractDataFunc</code> (function, optional): callback function that takes a data object and returns another. After the response body has been parsed from JSON string to actual data, the data are run through this function, before being handled by <code>handleDataFunc</code>. Default: data is returned unchanged.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td><code>handleDataFunc</code> (function, optional but makes little sense to omit): callback function that takes a data object (curated data from guillotine) and does something with it - <strong>this callback is pretty much what <code>doGuillotineRequest</code> is all about</strong>. Default: do-nothing.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td><code>catchErrorsFunc</code> (function, optional): callback function that takes an error object and handles it. Default: console-error-logs the error message.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="frontend_guillotine_request"><a class="link" href="#frontend_guillotine_request">Frontend guillotine request</a></h3>
<div class="paragraph">
<p>Now we&#8217;re ready to <strong>add a guillotine call from the frontend</strong>, specifically to <em>MovieList.tsx</em>. Here&#8217;s what we&#8217;ll do:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Focus on the guillotine request and just add a click listener that asks for the <em>next X movie items</em> in the list after the ones that are displayed</p>
</li>
<li>
<p>&#8230;&#8203;where X is the number of movies rendered to begin with. So if the <em>movie-list</em> part is configured to do the first rendering from the controller with X=3 movies, the guillotine request in <em>MovieList.tsx</em> will ask for data about the movies 4 through 6. Or in the language of our guillotine query: <code>first: 3, offset: 3</code>.</p>
</li>
<li>
<p>It should also keep counting so that if we click one more time, it should ask for the next X movies <em>after</em> the ones it previously found</p>
</li>
<li>
<p>&#8230;&#8203;so that in the next query, <code>first:3, offset:6</code>, and then <code>first:3, offset:9</code>, etc.</p>
</li>
<li>
<p>It should do this by keeping the <code>query</code> string stable and updating <code>variables</code> for each request.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/MovieList2.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React, { useState, useEffect } from 'react';     <i class="conum" data-value="1"></i><b>(1)</b>

import './MovieList.scss';

import Movie from "../shared/Movie";

                                                        <i class="conum" data-value="2"></i><b>(2)</b>
import doGuillotineRequest from "../../headless/guillotineRequest";
import { buildQueryListMovies, buildParentPathQuery, extractMovieArray } from "../../headless/helpers/movieListRequests";

                                                        <i class="conum" data-value="3"></i><b>(3)</b>
// State values that don't need re-rendering capability, but need to be synchronously read/writable across closures.
let nextOffset = 0;             // Index for what will be the next movie to search for in a guillotine request


const MovieList = ({movies, apiUrl, parentPath, movieCount, sortExpression}) =&gt; {

                                                        <i class="conum" data-value="4"></i><b>(4)</b>
    // UseEffect with these arguments ( function, [] ) corresponds to componentDidMount in the old-school class-based react components, and only happens after the first time the component is rendered into the DOM.
    useEffect(
        ()=&gt;{
            console.log("Initializing...");
            nextOffset = movieCount;
        },
        []
    );


    // ------------------------------------------------------
    // Set up action methods, triggered by listener:

                                                                    <i class="conum" data-value="5"></i><b>(5)</b>
    // Makes a (guillotine) request for data with these search parameters and passes an anonymous callback function as
    // handleDataFunc (used on the returned list of movie data).
    const makeRequest = () =&gt; {
        console.log("Requesting", movieCount, "movies, starting from index", nextOffset);
        doGuillotineRequest({
            url: apiUrl,                                            <i class="conum" data-value="6"></i><b>(6)</b>

            query: buildQueryListMovies(),                          <i class="conum" data-value="7"></i><b>(7)</b>

            variables: {
                first: movieCount,
                offset: nextOffset,                                 <i class="conum" data-value="8"></i><b>(8)</b>
                sort: sortExpression,
                parentPathQuery: buildParentPathQuery(parentPath)   // <i class="conum" data-value="9"></i><b>(9)</b>
            },

            extractDataFunc: extractMovieArray,                     <i class="conum" data-value="10"></i><b>(10)</b>

            handleDataFunc: (newMovieItems) =&gt; {                    <i class="conum" data-value="11"></i><b>(11)</b>
                console.log("Received data:", newMovieItems);
                nextOffset += movieCount;
            }
        });
    };

    // ------------------------------------------------------------------------------------
    // Actual rendering:

    return (
        &lt;div className="movieList" onClick={makeRequest}&gt;           {/* &lt;12&gt; */}
            {movies
                ? movies.map(movie =&gt;
                        &lt;Movie key={movie.id} {...movie} /&gt;
                    )
                : null
            }
        &lt;/div&gt;
    );
};

// MUST use this export line wrapping, because of the hooks we'll add later.
export default (props) =&gt; &lt;MovieList {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The changes are:</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import some <a href="https://reactjs.org/docs/hooks-overview.html">react hooks</a> to help us handle some component state and lifecycle events</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Import <code>doGuillotineRequest</code> described moments ago, and also the same helpers from <em>headless/helpers/movieListRequests.ts</em> that we&#8217;re already using <a href="#movie-list-part-controller">in the part controller</a>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>nextOffset</code> keeps track of how far the guillotine requests have counted, or rather: what the first movie in the next request should be (the next <code>variables.offset</code>)</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>We pass a callback function to <code>useEffect</code>, a react hook that (in this case, since the array after is empty) only calls the callback after the first time the component has been rendered. This way, <code>nextOffset</code> gets an initial value, only once.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td><code>makeRequest</code> is the function that triggers the behavior:</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td><code>doGuillotineRequest</code> sends a request to the API at the prop <code>apiUrl</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td><code>buildQueryListMovies</code> gives ut the same query string as in the part controller,</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The rest of the <code>props</code> from the controller are now used to build the <code>variables</code> object which are inserted as the parameters in the query. Except the <code>offset</code> parameter, which uses the <em>current value</em> of the counting <code>nextOffset</code>,</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Just like in the controller, <code>buildParentPathQuery</code> uses the path of the movies' parent content to build a subquery variable,</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>And also like in the controller, we use <code>extractMovieArray</code> to convert guillotine results to a data format that corresponds to an array of <em>Movie.tsx</em> props - just by passing the function into <code>doGuillotineRequest</code> as the <code>extractDataFunc</code> parameter,</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>And finally, when we the data has passed through <code>extractMovieArray</code> and we get some <code>newMovieItems</code>, we do a temporary action for now: console-log the data, and increase <code>nextOffset</code> with the initial number of movies, so it&#8217;s ready for the next request.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>We add <code>onClick={makeRequest}</code> to the movie list DOM container element. Now, when we click the list, <code>makeRequest</code> is triggered, and the resulting data from the guillotine API is displayed in the browser log.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Rebuilding this and running the moviesite in a preview window and with a console open, and the clicking somewhere on the list, say 3 times, the result might look something like this (note the console messages, how the returned movie IDs are not the same between responses, and that &#8220;starting from index&#8230;&#8203;&#8221; keeps counting):</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="media/click-data.png" alt="click data" width="1024px" title="Console logs different data items from 3 mouse clicks"></span></p>
</div>
</div>
<div class="sect2">
<h3 id="dynamic_dom_updates"><a class="link" href="#dynamic_dom_updates">Dynamic DOM updates</a></h3>
<div class="paragraph">
<p>With the request and the data flow in place, we&#8217;re just a small step away from <strong>rendering the returned movies</strong> at the bottom of the page, effectively filling in new movies on the page for each click.</p>
</div>
<div class="paragraph">
<p>React is <em>very</em> eager to do this whenever a component state is updated, so we&#8217;ll let it <strong>render from the state</strong> instead of directly from the <code>movie</code> prop:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/MovieList3.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import React, { useState, useEffect } from 'react'

import './MovieList.scss';

import Movie from "../shared/Movie";

import doGuillotineRequest from "../../headless/guillotineRequest";
import { buildQueryListMovies, buildParentPathQuery, extractMovieArray } from "../../headless/helpers/movieListRequests";

// State values that don't need re-rendering capability, but need to be synchronously read/writable across closures.
let nextOffset = 0;             // Index for what will be the next movie to search for in a guillotine request


const MovieList = ({movies, apiUrl, parentPath, movieCount, sortExpression}) =&gt; {

                                                                    <i class="conum" data-value="1"></i><b>(1)</b>
    // Setup asynchronous component state that triggers re-render on change.
    const [state, setState] = useState({ movies });

    // UseEffect with these arguments ( function, [] ) corresponds to componentDidMount in the old-school class-based react components.
    useEffect(
        ()=&gt;{
            console.log("Initializing...");

            nextOffset = movieCount;
        },
        []
    );


    // ------------------------------------------------------
    // Set up action methods, triggered by listener:

    // Makes a (guillotine) request for data with these search parameters and passes an anonymous callback function as
    // handleDataFunc (used on the returned list of movie data).
    const makeRequest = () =&gt; {
        console.log("Requesting", movieCount, "movies, starting from index", nextOffset);
        doGuillotineRequest({
            url: apiUrl,

            query: buildQueryListMovies(),

            variables: {
                first: movieCount,
                offset: nextOffset,
                sort: sortExpression,
                parentPathQuery: buildParentPathQuery(parentPath)
            },

            extractDataFunc: extractMovieArray,

            handleDataFunc: updateDOMWithNewMovies                  <i class="conum" data-value="2"></i><b>(2)</b>
        });
    };

    // When a movie data array is returned from the guillotine data request, this method is called.
    const updateDOMWithNewMovies = (newMovieItems) =&gt; {
        console.log("Received data:", newMovieItems);
        if (newMovieItems.length &gt; 0) {
            console.log("Adding movies to state:", newMovieItems.map(movie =&gt; movie.title));

            nextOffset += movieCount;                               <i class="conum" data-value="3"></i><b>(3)</b>

            // Use a function, not just a new direct object/array, for mutating state object/array instead of replacing it:
            setState(oldState =&gt; ({                                 <i class="conum" data-value="4"></i><b>(4)</b>
                movies: [
                    ...oldState.movies,
                    ...newMovieItems
                ]
            }));

            console.log("Added new movies to state / DOM.");
        }
    };


    // ------------------------------------------------------------------------------------
    // Actual rendering:

    return (
        &lt;div className="movieList" onClick={makeRequest}&gt;
            {state.movies
                ? state.movies.map(movie =&gt;                         <i class="conum" data-value="5"></i><b>(5)</b>
                        &lt;Movie key={movie.id} {...movie} /&gt;
                    )
                : null
            }
        &lt;/div&gt;
    );
};

// MUST use this export line wrapping, because of the useState hook.
export default (props) =&gt; &lt;MovieList {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Changes:</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>useState</code> react hook defines the component state: we pass the <code>movies</code> prop into it to set the initial state content. In return we get an array containing <code>state</code> - a handle for the <em>current</em> state - and <code>setState</code> - a function that updates the state.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>We now want <code>doGuillotineRequest</code> to trigger the new function <code>updateDOMWithNewMovies</code> when the guillotine data is returned and curated.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>In <code>updateDOMWithNewMovies</code> we only keep counting the <code>nextOffset</code> if any movies were actually added.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>We call <code>setState</code> to update the state, so that the incoming items from guillotine are added after the old ones.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Use <code>state.movies</code> instead of just the <code>movies</code> props: now react will watch the state and automatically re-render the component as soon as the state is updated.</td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>It&#8217;s possible to use <code>setState</code> with a new object instead of a function:</p>
</div>
<div class="paragraph">
<p><code>setState( { movies: [&#8230;&#8203;state.movies, &#8230;&#8203;newMovieItems]});</code></p>
</div>
<div class="paragraph">
<p>But <code>setState</code> is an asynchronous function, and calling it with an object argument ("the current state of things" at the time setState is called, which is not when the update actually happens) runs the risk of introducing race conditions: we&#8217;d lose control of timing when the DOM updates, especially since we&#8217;re going to combine that length-of-DOM with a continuously scrolling and quickly updating trigger.</p>
</div>
<div class="paragraph">
<p>So in the example, we use a callback function argument to work around this. Something like
<em>"Hey, React: whenever you&#8217;re ready to actually do the state update, do it based on what things are like at <strong>that</strong> time"</em>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Rebuild the app, update the moviesite preview tab and try clicking on the list. New movies should appear below the existing one, expanding the movie list as you click:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="media/click-fill-dom.png" alt="click fill dom" width="1024px" title="Each click fetches new movies and renders them"></span></p>
</div>
</div>
<div class="sect2">
<h3 id="scroll_listener"><a class="link" href="#scroll_listener">Scroll listener</a></h3>
<div class="paragraph">
<p>We have arrived! The final step in this chapter:</p>
</div>
<div class="paragraph">
<p>We&#8217;ll finish <em>MovieList.tsx</em> by replacing the click listener with a scroll listener. The scroll listener will check if the page has been scrolled almost all the way to the bottom (i.e. the bottom of the movie-list container is just a little bit below the bottom of the screen) and triggers the same procedure if it has.</p>
</div>
<div class="paragraph">
<p>With one additional change to the procedure: the trigger should disable the scroll listener temporarily, only re-enabling it when we get some data back (or after a delay). This is to avoid flooding <em>guillotineApi.ts</em> with requests - since scroll events are fast and numerous.</p>
</div>
<div class="listingblock">
<div class="title">react4xp/myEntries/MovieList4.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">import React, { useState, useEffect } from 'react'

import './MovieList.scss';

import Movie from "../shared/Movie";

import doGuillotineRequest from "../../headless/guillotineRequest";
import { buildQueryListMovies, buildParentPathQuery, extractMovieArray } from "../../headless/helpers/movieListRequests";

// State values that don't need re-rendering capability, but need to be synchronously read/writable across closures.
let nextOffset = 0;             // Index for what will be the next movie to search for in a guillotine request

let listenForScroll = true;                                         <i class="conum" data-value="1"></i><b>(1)</b>
const TRIGGER_OFFSET_PX_FROM_BOTTOM = 200;                          <i class="conum" data-value="2"></i><b>(2)</b>


const MovieList = ({movies, apiUrl, parentPath, movieCount, sortExpression}) =&gt; {

    // Setup asynchronous component state that triggers re-render on change.
    const [state, setState] = useState({ movies });

    const listContainerId = `movieListContainer_${parentPath}`;     <i class="conum" data-value="3"></i><b>(3)</b>

    // UseEffect with these arguments ( function, [] ) corresponds to componentDidMount in the old-school class-based react components.
    useEffect(
        ()=&gt;{
            console.log("Initializing...");

            nextOffset = movieCount;
                                                                    <i class="conum" data-value="4"></i><b>(4)</b>
            // Browser-specific functionality, so this is prevented from running on the SSR
            if (typeof window.navigator !== 'undefined') {
                initScrollListener();
            }
        },
        []
    );

    // Set up scroll listener, when the component is first mounted.
    // Causes a trigger func function to be called when the bottom of the visible window is scrolled down to less
    // than TRIGGER_OFFSET_PX_FROM_BOTTOM of the movie list element.
    const initScrollListener = () =&gt; {
        console.log("Init scroll listener");
                                                                    <i class="conum" data-value="5"></i><b>(5)</b>
        var movieListElem = document.getElementById(listContainerId);

        // ACTUAL SCROLL LISTENER:
        window.addEventListener("scroll", () =&gt; {
            if (listenForScroll) {                                  <i class="conum" data-value="6"></i><b>(6)</b>

                                                                    <i class="conum" data-value="7"></i><b>(7)</b>
                var movieBounds = movieListElem.getBoundingClientRect();
                if (movieBounds.bottom &lt; window.innerHeight + TRIGGER_OFFSET_PX_FROM_BOTTOM) {
                    console.log("!!! SCROLL TRIGGER !!!");

                    listenForScroll = false;

                    makeRequest();

                }
            }
        });
    };

    // ------------------------------------------------------
    // Set up action methods, triggered by listener:

    // Makes a (guillotine) request for data with these search parameters and passes an anonymous callback function as
    // handleDataFunc (used on the returned list of movie data).
    const makeRequest = () =&gt; {
        console.log("Requesting", movieCount, "movies, starting from index", nextOffset);
        doGuillotineRequest({
            url: apiUrl,

            query: buildQueryListMovies(),

            variables: {
                first: movieCount,
                offset: nextOffset,
                sort: sortExpression,
                parentPathQuery: buildParentPathQuery(parentPath)
            },

            extractDataFunc: extractMovieArray,

            handleDataFunc: updateDOMWithNewMovies
        });
    };

    // When a movie data array is returned from the guillotine data request, this method is called.
    const updateDOMWithNewMovies = (newMovieItems) =&gt; {
        console.log("Received data:", newMovieItems);
        if (newMovieItems.length &gt; 0) {
            console.log("Adding movies to state:", newMovieItems.map(movie =&gt; movie.title));

            nextOffset += movieCount;

            // Use a function, not just a new direct object/array, for mutating state object/array instead of replacing it:
            setState(oldState =&gt; ({
                movies: [
                    ...oldState.movies,
                    ...newMovieItems
                ]
            }));

            console.log("Added new movies to state / DOM.");

            listenForScroll = true;                                 <i class="conum" data-value="8"></i><b>(8)</b>

        } else {
            setTimeout(
                () =&gt; {  listenForScroll = true; },
                500
            )

        }
    };

    // ------------------------------------------------------------------------------------
    // Actual rendering:

    return (
        &lt;div id={listContainerId} className="movieList"&gt;            {/* &lt;9&gt; */}
            {state.movies
                ? state.movies.map(movie =&gt;
                        &lt;Movie key={movie.id} {...movie} /&gt;
                    )
                : null
            }
        &lt;/div&gt;
    );
};

// MUST use this export line wrapping, because of the useState hook.
export default (props) =&gt; &lt;MovieList {...props} /&gt;;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>listenForScroll</code> is the scroll-listener&#8217;s enabled-switch.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Threshold value: if the distance between the bottom of the screen and the bottom of the movielist DOM container is less than this number of pixels, <code>makeRequest</code> should be triggered.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>We store a string to uniquely identify the movie-list container element in the DOM.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>In the component-initializing function (remember <code>useEffect</code>), we want to call <code>initScrollListener</code>. It&#8217;s a one-time function that sets up a scroll listener that will last for the lifespan of the component. However, remember that <em>MovieList.tsx</em> is also server-side rendered from the controller, so this very same script will run serverSide by React4xp! We check for <code>window.navigator</code> here because <strong>we only want this scroll listener setup to run in a browser context</strong>, not during SSR. Not only because a scroll listener makes no sense during server-side rendering, but to prevent errors that break the rendering (see the <a href="#serverbrowserbreakage">note below</a>).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>During <code>initScrollListener</code>, we start by storing a handle to the movie-list container element in the DOM.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The scroll event listener will be prevented from doing anything as long as <code>listenForScroll</code> is false.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Here the distance between the bottom of the screen and the bottom of the movie-list container element is calculated. If that&#8217;s smaller than the threshold <code>TRIGGER_OFFSET_PX_FROM_BOTTOM</code>, disable the listener and trigger <code>makeRequest</code>, which performs the same duties as before: request movie data from the guillotine API, and insert that into the state to trigger rendering&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>&#8230;&#8203;with one thing added: switch the scroll listener back on when data has been received and handled, OR after 500 ms after receiving empty data.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Removing the click listener and adding the unique ID <code>listContainerId</code> to the container element.</td>
</tr>
</table>
</div>
<div id="serverbrowserbreakage" class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The server-side rendering engine lacks most browser-specific JS functionality (except for the things React4xp has specifically polyfilled).</p>
</div>
<div class="paragraph">
<p><strong>Referring to browser-specific functionality during server-side rendering will usually throw an error in the server log</strong> and break the rendering.</p>
</div>
<div class="paragraph">
<p>This is easily prevented by checking the global namespace for functionality that only exists in a browser, such as <code>window.navigator</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>And there we have it: <strong>our infinite scroller</strong>!</p>
</div>
<div class="paragraph">
<p>Rebuild, refresh the preview of <em>MovieSite</em>, and instead of clicking, just scroll down - the page should auto-refresh to add new content until the very end of time or the end of your added movies, whichever comes first.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="other_resources_and_tools"><a class="link" href="#other_resources_and_tools">Other resources and tools</a></h2>
<div class="sectionbody">
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
This section is not a vital part of the rest of this or the next chapter. Feel free to skip it and miss out.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To dive deeper into Guillotine and graphQL, you can always check out the  <a href="https://developer.enonic.com/docs/intro">Intro</a>, or our
<a href="https://developer.enonic.com/docs/developer-101">Developer 101 tutorial</a>.</p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2025-08-19 10:09:20 UTC
</div>
</div>
</body>
</html>