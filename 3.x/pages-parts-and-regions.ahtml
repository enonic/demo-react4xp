<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>XP content studio -  pages, parts, regions and content</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child{border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active,#footnotes .footnote a:first-of-type:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>XP content studio -  pages, parts, regions and content</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#tldr">TL;DR</a></li>
<li><a href="#lesson_overview">Lesson overview</a></li>
<li><a href="#template_with_react_page_controller">Template with React Page Controller</a>
<ul class="sectlevel2">
<li><a href="#code">Code</a></li>
<li><a href="#page_template_setup">Setting up the Template</a></li>
</ul>
</li>
<li><a href="#xp_part">XP Part</a>
<ul class="sectlevel2">
<li><a href="#code_2">Code</a></li>
</ul>
</li>
<li><a href="#adding_parts_to_new_content">Setup and render</a></li>
<li><a href="#output">Output</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>So far, we&#8217;ve used a "raw" XP Page and just rendered the react component directly from the controller there. It&#8217;s fine in itself, but not really making good use of XP&#8217;s excellent CMS powers. So let&#8217;s move into that territory!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tldr"><a class="link" href="#tldr">TL;DR</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Naturally, this example will focus quite a bit on XP Content Studio and how to use Parts, Pages, Regions and Templates. If this is familiar to you, you can pretty much just skim through it.</p>
</div>
<div class="paragraph">
<p><strong>The key takeaways are:</strong></p>
</div>
<div class="paragraph">
<p><strong>1.</strong> <code>React4xp.render</code> works the same way <strong>from any controller, and independently</strong>:
    - A Region in a react4xp-rendered Page can contain any kind of Component (react4xp-rendered or not).
    - And a react4xp-rendered Component can be placed inside the Region of any kind of Page (react4xp-rendered or not).</p>
</div>
<div class="paragraph">
<p><strong>2.</strong> React4xp comes with an <strong>importable <code>&lt;Regions&gt;</code> react component</strong> for making XP Regions inside rendered output,
    - One caveat: Regions work best when server-side rendered. Specifically: using <code>clientRender</code> when react4xp-rendering a Region can cause the components inside the Region to drop their page contributions. This can break rendering and/or functionality of the Components inside - both react4xp-type and other kinds.</p>
</div>
<div class="paragraph">
<p><strong>3.</strong> Each time the rendered page contributions make the browser call <a href="hello-react.ahtml#hello_output"><code>hydrate</code></a> or <a href="hello-react.ahtml#clientrendered_output"><code>render</code></a>, an <strong>independent top-level react root app</strong> is created in the browser - so a page can easily have more than one react root app.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This last point means: if you use react4xp to render an XP Region in a Page/Layout, and insert a react4xp-rendered Part into that Region, this is NOT the same as the regular react way of importing and nesting one react component inside another, within the same app. The Page/Layout controller will create one react app, and the Part will be another one.</p>
</div>
<div class="paragraph">
<p>So be sure to <strong>structure your react app(s) to be self-contained</strong>, with an <a href="entries.ahtml">entry</a> at the top level of each. This is especially important for functionality that&#8217;s shared inside one app, across react components - for example <a href="https://reactjs.org/docs/context.html">react context providers</a>).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="lesson_overview"><a class="link" href="#lesson_overview">Lesson overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>React4xp don&#8217;t need to render from a Page controller, but can also render from XP <em>Part or Layout controllers</em>, creating react-rendered XP elements that can be dragged into any regular XP Region. And besides, react4xp can (serverside) render these XP Regions themselves, which can then accept any XP Parts/Layouts dropped into them (as well as Fragments, Text and Image components of course).</p>
</div>
<div class="paragraph">
<p>In this example, we&#8217;ll do both:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Make a react-rendered general <a href="https://developer.enonic.com/docs/xp/stable/cms/components">XP Page Controller</a> with a working XP Region.</p>
</li>
<li>
<p>Make a react-rendered <a href="https://developer.enonic.com/docs/xp/stable/cms/components#part">XP Part</a> that can be dragged into the Region.</p>
</li>
<li>
<p>In addition, we&#8217;ll display it in the "regular XP way": using a <a href="https://developer.enonic.com/docs/xp/stable/cms#page_templates">Page Template</a> to connect a <a href="https://developer.enonic.com/docs/xp/stable/cms/content-types">Content Type</a> to our new Page controller. This way, in this example and the next ones, we can just create content items of that type and have the Page controller up and running immediately instead of having to set it up manually each time.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">site/content-types/
  my-content/
    my-content.xml

site/pages/
  default/
    default.xml
    default.es6
    default.jsx

site/parts/
  color/
    color.xml
    color.es6
    color.jsx</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="template_with_react_page_controller"><a class="link" href="#template_with_react_page_controller">Template with React Page Controller</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>We&#8217;ll make a generic XP content type, then make a Template in Content Studio and connect the content type to a react-based XP Page, <em>site/pages/default/</em>, which is just a bare-bone page with nothing but a Region in it.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The Page controller <em>default</em> can be made from scratch, or you can copy <em>site/pages/hello-react</em> and change the copy (don&#8217;t delete <em>hello-react.jsx</em> just yet, we&#8217;re going to re-use it <a href="custom-flow-syntax.ahtml">later</a>). If you copy and modify, just remember this as usual: name the the <strong>folder and file names</strong> identically.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="code"><a class="link" href="#code">Code</a></h3>
<div class="sect3">
<h4 id="content_type"><a class="link" href="#content_type">Content Type</a></h4>
<div class="paragraph">
<p>Start with a completely generic content type: <em>site/content-types/my-content/my-content.xml</em>. Content types tend to define more than this, but for now, this is all we need:</p>
</div>
<div class="listingblock">
<div class="title">my-content.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;content-type&gt;
    &lt;display-name&gt;My Content&lt;/display-name&gt;
    &lt;description&gt;Just some content&lt;/description&gt;
    &lt;super-type&gt;base:structured&lt;/super-type&gt;
    &lt;form/&gt;
&lt;/content-type&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Again, this content type has nothing to do with react4xp, but it&#8217;ll make the setup of this and the next examples easier.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="xp_page_definition"><a class="link" href="#xp_page_definition">XP Page definition</a></h4>
<div class="paragraph">
<p>The page definition is simple. We&#8217;re now leaving the <code>&lt;form&gt;</code> node empty, but adding a <code>&lt;regions&gt;</code> node with a single <code>"main"</code> Region defined in it:</p>
</div>
<div class="listingblock">
<div class="title">default.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;page&gt;
    &lt;display-name&gt;Default page&lt;/display-name&gt;
    &lt;description&gt;Default react-rendered Page controller&lt;/description&gt;
    &lt;form/&gt;
    &lt;regions&gt;
        &lt;region name="main"/&gt;
    &lt;/regions&gt;
&lt;/page&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="react_component"><a class="link" href="#react_component">React component</a></h4>
<div class="paragraph">
<p>This react component has a single focus, namely rendering the Region.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>We&#8217;re going to make a page controller with a react-rendered XP region and insert react-rendered components into the region, just to show how to react-render XP pages, parts and regions.</p>
</div>
<div class="paragraph">
<p><strong>But react4xp doesn&#8217;t depend on this structure,</strong> it works fine with other, "regular" XP components.</p>
</div>
<div class="paragraph">
<p>As long as you follow the general patterns here, you can use parts with react4xp components inside any old XP region (e.g. from Thymeleaf), and the other way around - render XP regions with react and insert any XP components into them.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">default.jsx</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React from 'react';
import Regions from '@enonic/react-components/Regions';    <i class="conum" data-value="1"></i><b>(1)</b>

export default (props) =&gt; (
    &lt;div className="default-page"&gt;
        &lt;Regions {...props} /&gt;                     <i class="conum" data-value="2"></i><b>(2)</b>
    &lt;/div&gt;
);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Importing a Region template from an NPM package that comes with react4xp (<a href="https://www.npmjs.com/package/@enonic/react-components">@enonic/react-components</a>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Nesting the Region in our component. To be precise: it uses <code>props.regionsData</code> and selects the Region name(s) in <code>props.names</code>, so it will render <em>all</em> Regions given by <code>props</code> if more than one is defined and selected.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="page_controller"><a class="link" href="#page_controller">Page controller</a></h4>
<div class="paragraph">
<p>The <code>props</code> of course come from the <strong>Page controller</strong>. Still similar to the previous examples, we&#8217;re mainly just adding props that are needed by <code>&lt;Regions&gt;</code> in the react component.</p>
</div>
<div class="listingblock">
<div class="title">default.es6:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');

exports.get = function(request) {
    const content = portal.getContent();
    const entry = portal.getComponent();

    const id = `react4xp_${content._id}`;   <i class="conum" data-value="1"></i><b>(1)</b>

    const props = {
        regionsData: content.page.regions,  <i class="conum" data-value="2"></i><b>(2)</b>
        names: "main",                      <i class="conum" data-value="3"></i><b>(3)</b>
        tag: "main",                        <i class="conum" data-value="4"></i><b>(4)</b>
    };

    return React4xp.render(
        entry,
        props,
        null,                               <i class="conum" data-value="5"></i><b>(5)</b>
        {
            id,
            body: `
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;title&gt;${content.displayName}&lt;/title&gt;
                    &lt;/head&gt;
                    &lt;body class="xp-page"&gt;
                        &lt;div id="${id}"&gt;&lt;/div&gt;
                    &lt;/body&gt;
                &lt;/html&gt;
            `
        }
    );
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The XP content ID is nice and unique, let&#8217;s just use that to bind the react component to the target element in the DOM.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Here, <code>content.page.regions</code> are content data containing the Region we defined in <em>default.xml</em> as well as data about content dropped into it. This is mapped to the <code>regionsData</code> prop.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>names</code> prop can be a string or a string array. It&#8217;s used to select which Regions (by Region name defined in <em>default.xml</em>) to render, in case there are more Regions in <code>content.page.regions</code>. Rendering will occur in the order of the string array. If the <code>names</code> prop is missing, all the regions defined in <em>default.jsx</em> are rendered (so we could technically skip this prop here), but the order is less predictable if there&#8217;s more than one Region.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The optional <code>tag</code> prop sets which HTML tag will be at the root of the section rendered by <code>&lt;Regions&gt;</code>, instead of <code>&lt;div&gt;</code>. Here, we&#8217;re going for <code>&lt;main&gt;</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>We&#8217;re setting the <code>request</code> argument of <code>React4xp.render</code> to <em>null</em> - switching off the auto-handling of how <em>this</em> particular rendering is done inside/outside Content Studio, and just forcing <code>React4xp.render</code> to <strong>always output a static, serverside rendered HTML body without page contributions</strong>. But why? Two reasons:
<div class="ulist">
<ul>
<li>
<p>The way it is now, <em>default.jsx</em> and the Regions in it has no need for page contributions. Only the static HTML is of interest; no client-side JS code needs to be activated/rendered in the client, and there&#8217;s no styling or anything else coming from it. So by skipping the page contributions rendering, performance is improved a little.</p>
</li>
<li>
<p>There is a <strong>caveat</strong> when using react4xp to render Regions (like we do in in <em>default.jsx</em>): currently, page contributions don&#8217;t work for XP Parts/Layouts if they are dropped into a <em>clientside</em>-rendered Region. So <strong>Regions must be serverside rendered if they contain XP components that need their own page contributions to work</strong> (for example react4xp parts, which rely on page contributions to be activated in the client). So by forcing a static serverside Regions rendering, we prevent that corner case from failing, and make sure <em>any</em> XP element dropped inside the Region will work, even clientside-rendered react4xp parts.</p>
</li>
</ul>
</div></td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Adding an XP Region to a Layout is the same, only easier: since it will be injected inside a Page, you don&#8217;t need to add an outer <code>body</code> in the <em>options</em> parameter, and therefore you don&#8217;t need an <code>id</code> parameter either - same as in the XP Part controller below.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="page_template_setup"><a class="link" href="#page_template_setup">Setting up the Template</a></h3>
<div class="paragraph">
<p>Before we move on to the XP Part, we need to bind this Page controller to the <code>my-content</code> Content Type we just made, in the regular XP way: a <a href="https://developer.enonic.com/docs/xp/stable/cms#page_templates">Page Template</a>.</p>
</div>
<div class="paragraph">
<p>This lays the foundation for this example and also the later ones. When this is done, <strong>using the <em>default</em> Page controller will be easy</strong>: create a new <em>my-content</em> item in your site, and it will come out ready to use with the Region from <em>default</em>.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When you&#8217;ve deployed the updated app and logged into Content Studio, make a new Site content and connect it to the react4xp app (or re-use one of your previous ones).</p>
</li>
<li>
<p>In the grid (Content Studio browse mode), under your Site, create a new Template content under Templates:</p>
</li>
</ol>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/template_new.png" alt="template new" width="720px" title="Creating a new Template content in Content Studio."></span></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="olist arabic">
<ol class="arabic" start="3">
<li>
<p>When editing your new Template, give it a display name, select your new content type <em>my-content</em> in the <em>"Supports"</em> drop-down menu on the left, and select the new Page controller <em>Default</em> under the <em>"Template</em>" (or <em>"Page controller"</em>) drop-down menu on the right:</p>
</li>
</ol>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/template_edit.png" alt="template edit" width="720px" title="Using a Template to connect a content type to a page controller in Content Studio."></span></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="olist arabic">
<ol class="arabic" start="4">
<li>
<p>Apply/save and you&#8217;re done. Now every new <em>myContent</em> item in every site with this Template will be rendered with the <em>default</em> page controller.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xp_part"><a class="link" href="#xp_part">XP Part</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now we&#8217;re ready to add a simple react-rendered Part to drop into the Region: <em>site/parts/color/</em> .</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="code_2"><a class="link" href="#code_2">Code</a></h3>
<div class="sect3">
<h4 id="part_definition"><a class="link" href="#part_definition">Part definition</a></h4>
<div class="paragraph">
<p>The Part definition is still pretty unremarkable. There&#8217;s just a <code>color</code> TextLine input field in the form:</p>
</div>
<div class="listingblock">
<div class="title">color.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;part&gt;
    &lt;display-name&gt;Color part&lt;/display-name&gt;
    &lt;description&gt;React4xp rendered part with editorial color&lt;/description&gt;
    &lt;form&gt;
        &lt;input name="color" type="TextLine"&gt;
            &lt;label&gt;What's the color of the thing?&lt;/label&gt;
            &lt;occurrences minimum="1" maximum="1"/&gt;
            &lt;default&gt;red&lt;/default&gt;
        &lt;/input&gt;
    &lt;/form&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="react_component_2"><a class="link" href="#react_component_2">React component</a></h4>
<div class="paragraph">
<p>The react component only displays the color name from the props and inline-styles it with that color (as long as the <code>props.color</code> value is HTML-compliant):</p>
</div>
<div id="color_jsx" class="listingblock">
<div class="title">color.jsx</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React from 'react';

export default (props) =&gt; (
    &lt;div style={{
        border: `1px solid ${props.color}`,
        margin: "8px",
        padding: "8px",
        borderRadius: "10px"
    }}&gt;
        &lt;p style={{color: props.color}}&gt;Hey, I'm pretty {props.color}!&lt;/p&gt;
    &lt;/div&gt;
);</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="part_controller"><a class="link" href="#part_controller">Part controller</a></h4>
<div class="paragraph">
<p>Like before, the controller mainly hooks the XP editorial data into the props:</p>
</div>
<div id="color_part_controller" class="listingblock">
<div class="title">color.es6:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');

exports.get = function(request) {

    const component = portal.getComponent();

    const props = { color: component.config.color };

    return React4xp.render(
        component,
        props,
        request,
        {                               <i class="conum" data-value="1"></i><b>(1)</b>
            clientRender: true,         <i class="conum" data-value="2"></i><b>(2)</b>
            pageContributions: {        <i class="conum" data-value="3"></i><b>(3)</b>
                bodyEnd: `&lt;script&gt;console.log("The color of the thing is: ${component.config.color}");&lt;/script&gt;`
            }
        });
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>In the <em>options</em> argument (the object with <code>clientRender</code> and <code>pageContributions</code>), notice how we&#8217;re <em>not</em> adding <code>body</code> or <code>id</code> like we did before. <code>body</code> is only needed for the controller to <em>add</em> HTML around the rendered react - if you skip it a target container <code>&lt;div&gt;</code> will just be generated for you. With an autogenerated container, the ID will match either way: you can still set the ID value with the <code>id</code> <em>option</em>, or skip it and just let react4xp supply a unique ID. For details, see the <a href="api.ahtml#react4xp_render">React4xp.render API</a>. For that matter, <strong>we don&#8217;t even need the options argument here at all</strong> - it could be completely skipped&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>&#8230;&#8203;but for demonstrating, let&#8217;s use it to show that this Part is <em>independent</em> (from both the <em>default</em> Page we defined a moment ago, and from any other Parts dropped into the same Region, react or otherwise), by clientside rendering the Part&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>&#8230;&#8203;and adding a tiny color-logging script with the Part. This is done by using the <em>options</em> parameter to pass <code>pageContributions</code> through <code>.render</code>, the same way we&#8217;ve passed <code>body</code> through it so far.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="adding_parts_to_new_content"><a class="link" href="#adding_parts_to_new_content">Setup and render</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Time to get this displayed and see it all in action! Again, just XP routine: creating a <em>my-content</em> item, and since the Template makes it show up ready with a <em>default</em> Page controller and Region, we can just drop our new <em>color</em> Part into it.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>As before, recompile/deploy and enter Content Studio. In the same Site as the Template you just made (but not under <em>Templates</em>), create a new <em>my-content</em> item:</p>
</li>
</ol>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/content_new.png" alt="content new" width="720px" title="Creating a new content item in Content Studio"></span></p>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/content_my.png" alt="content my" width="720px" title="Selecting the new my-content type in Content Studio"></span></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="olist arabic">
<ol class="arabic" start="2">
<li>
<p>When you edit the new content, the preview panel with a dash-bordered <strong><em>"Drop here"</em> area</strong> should appear on the right. This is the <em>default</em> Page controller rendering the initially empty <strong>Region</strong>. To the far right, there should be a config panel with the <em>"Insert"</em> tab (if you can&#8217;t see them, use the screen and cogwheel icons on the top right):</p>
</li>
</ol>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/page_with_ready_region.png" alt="page with ready region" width="720px" title="Editing new content in Content Studio, with Region ready to receive parts etc"></span></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="olist arabic">
<ol class="arabic" start="3">
<li>
<p>Drag <em>"Part"</em> from the config panel into the Region. In the dropdown menu (<em>"Type to search&#8230;&#8203;"</em>) that appears in the Region (or the <em>"Part"</em> dropdown menu now on the right), select your new <em>color</em> Part. It should now appear correctly rendered in the preview panel (occasionally, you might need to <em>Save</em> and refresh the page). And the config panel for editing the settings of that particular part should appear on the far right (if it doesn&#8217;t, click the part itself: <em>"Hey, I&#8217;m pretty red"</em>):</p>
</li>
</ol>
</div>
<div class="paragraph thumb">
<p><span class="image"><img src="media/content_with_red_part.png" alt="content with red part" width="720px" title="Editing new content in Content Studio, with Region ready to receive parts etc"></span></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="olist arabic">
<ol class="arabic" start="4">
<li>
<p>Try experimenting with dragging other XP components from the <em>"Insert"</em> tab into the Region. Say, a Text component, and/or adding another instance of the same <em>color</em> Part but with a different (HTML-compliant) color value in the Part config panel. You&#8217;ll see that the react-rendered Region accepts all regular XP components, and that multiple instances of the same <em>color</em> Part remain independent from each other.</p>
</li>
<li>
<p>As usual, clicking <em>Preview</em> on the top will open a new Preview tab for your page.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="output"><a class="link" href="#output">Output</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>We won&#8217;t go into the details about the HTML output anymore - it&#8217;s structurally and conceptually <strong>the same as in the previous examples</strong>. Looking at the <em>Page Source</em>, it should all make sense to you by now: the Page controller and Part are <strong>compiled to separate assets and downloaded exactly once</strong> in the client before calling <code>render</code> and <code>hydrate</code> as needed (using a react4xp Part more than once does not make the client download the assets more than once - they&#8217;re recycled for performance).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Each time the client calls <code>render</code> or <code>hydrate</code>, it will spawn a <strong>separate root react app</strong>. For this to happen a controller usually calls <code>React4xp.render</code> (*). So in this example, there will be one independent react app in the client for each of the <em>color</em> Parts you added to the Region.</p>
</div>
<div class="paragraph">
<p>(*) Remember from the code explanation of <a href="#page_controller">our Page controller</a> that <code>React4xp.render</code> needs the <code>request</code> argument to generate page contributions. Omitting <code>request</code> forces a pure serverside rendering without hydration - so our page controller is not starting a separate react app in the client.</p>
</div>
<div class="paragraph">
<p>(And just for the record, there is an alternative renderer: <code>.renderPageContributions</code>. It also starts a new react app, but never needs <code>request</code>. More on that in a <a href="custom-flow-syntax.ahtml">later lesson</a>)</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="paragraph">
<p>Now we&#8217;ve covered the basics of how to use react4xp. It&#8217;ll be enough for most simple setups and use cases.</p>
</div>
<div class="paragraph">
<p>Moving on from here, we&#8217;ll take a look at more advanced ways to use react4xp, giving you more control.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2025-09-04 11:08:04 UTC
</div>
</div>
</body>
</html>