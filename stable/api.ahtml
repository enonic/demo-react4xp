<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.20">
<title>React4XP - API reference</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>React4XP - API reference</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#getting_started">Getting started</a>
<ul class="sectlevel2">
<li><a href="#install">Install</a></li>
<li><a href="#import_library">Import library</a></li>
</ul>
</li>
<li><a href="#react4xp_render">React4xp.render</a>
<ul class="sectlevel2">
<li><a href="#signature">Signature</a></li>
<li><a href="#react4xp_render_parameters">Parameters</a></li>
<li><a href="#returns">Returns</a></li>
<li><a href="#render_request">Request and automated behavior</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
</li>
<li><a href="#react4xp_object">React4xp object: custom flow</a>
<ul class="sectlevel2">
<li><a href="#constructor">Object constructor</a></li>
<li><a href="#main_object_attributes">Main object attributes</a></li>
<li><a href="#setter_methods">Setter methods</a></li>
<li><a href="#rendering_methods">Rendering methods</a></li>
<li><a href="#react4xp_object_request">Request and automated behavior</a></li>
<li><a href="#custom_flow_examples">Custom flow examples</a></li>
</ul>
</li>
<li><a href="#ssr">SSR engine</a>
<ul class="sectlevel2">
<li><a href="#renderers">Renderers</a></li>
<li><a href="#warmup">Warmup time</a></li>
<li><a href="#performance">SSR performance</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div id="api" class="paragraph">
<p>The React4xp library (<a href="https://market.enonic.com/vendors/enonic/react4xp-lib">Enonic Market</a>) exposes a couple of methods that can be run from XP controllers.</p>
</div>
<div class="paragraph">
<p>This chapter also covers the <a href="#ssr">SSR engine</a>, compilation, and <a href="config/build-time.ahtml">configuration</a> of those.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="getting_started"><a class="link" href="#getting_started">Getting started</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="install"><a class="link" href="#install">Install</a></h3>
<div class="paragraph">
<p>Instructions on how to install the library locally or insert it into your project are at <a href="https://github.com/enonic/lib-react4xp#readme">the library docs</a> at github.</p>
</div>
</div>
<div class="sect2">
<h3 id="import_library"><a class="link" href="#import_library">Import library</a></h3>
<div class="listingblock">
<div class="title">In an XP controller:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const React4xp = require('/lib/enonic/react4xp');</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="react4xp_render"><a class="link" href="#react4xp_render">React4xp.render</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>All-in-one shorthand function for a lot of use cases. Covers both client- and serverside rendering.</p>
</div>
<div class="paragraph">
<p>Inserts a react component into an (optional) pre-existing HTML string and adds any necessary page contributions to make all work: links to assets, both shared and specific to the entry, and a client-side JS call (<code>render</code> or <code>hydrate</code> in the client wrapper) that activates the react component in the browser.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="signature"><a class="link" href="#signature">Signature</a></h3>
<div class="paragraph">
<p>The signature is analogous to thymeleaf&#8217;s familiar <code>render(view, model)</code>. But there are two extra parameters, and a full XP response object is returned:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">{body, pageContributions} = React4xp.render(entry, props, request, options);</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="react4xp_render_parameters"><a class="link" href="#react4xp_render_parameters">Parameters</a></h3>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>entry</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string or component object, mandatory</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Reference to an <a href="entries.ahtml">entry</a>: the react component to be rendered. <a href="jsxpath.ahtml">JsxPath</a> reference - or if the entry is a TSX/JSX file with the <em>same name</em> in the <em>same folder</em> as the controller, you can use a <code>portal.getComponent()</code> object here. Corresponds to the template argument in <code>thymeleaf.render</code>.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>props</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object, optional</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Data model passed into the react component. JS object must be serializable (no functions can be passed). Corresponds to the model argument in <code>thymeleaf.render</code>.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>request</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://developer.enonic.com/docs/xp/stable/framework/http">XP request object</a>, optional (but <em>mandatory for react activation</em>)</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Include to detect the rendering mode inside/outside Content Studio: inside Content Studio there should be only a static serverside-rendering, no browser react activation (or client-side rendering), only returning get an HTML visualization with the initial <code>props</code>. Special case: if <code>request</code> is not an object but omitted/falsy, page-contributions rendering is <em>completely skipped</em>. In this case, the <em>options</em> argument (below) is still valid: any added <code>body</code> there will still serve as a container for the rendered output from this call, and any <code>pageContributions</code> inside <em>options</em> are still added and returned.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>options</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object, optional</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Additional options to control the rendering. All of them are optional within this object:</p>
</div>
<table class="tableblock frame-ends grid-none stretch">
<caption class="title">Properties</caption>
<colgroup>
<col style="width: 1.0101%;">
<col style="width: 1.0101%;">
<col style="width: 1.0101%;">
<col style="width: 96.9697%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Default</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>id</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Generated unique string</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>ID of the component, targeting the ID of an element in <code>body</code> (below): react will render into that container element. Should be a unique ID within the entire HTML document.</p>
</div>
<div class="paragraph">
<p>If no matching element ID is found in <code>body</code>, this sets the ID of a generated element in the HTML output. If <code>id</code> is missing, a unique ID is generated, either random or generated from the content.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>body</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string: valid HTML</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;div&gt;</code> with matching <code>id</code></p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>HTML to serve as container for the react content. Can be a hardcoded string, come from a thymeleaf/mustache/XSLT render, or any source.  When server-side rendering, the rendered output will be inserted into the matching-<code>id</code> element inside here (replacing whatever was already in that element), and everything (container <code>body</code> with rendered content in it) is returned as one HTML string. When client-side rendering, this insertion happens in the browser.</p>
</div>
<div class="paragraph">
<p>If no <code>body</code> is supplied, an empty <code>&lt;div&gt;</code> element with an ID matching <code>id</code> is generated and used as container.</p>
</div>
<div class="paragraph">
<p>If a <code>body</code> is supplied but it doesn&#8217;t contain any element with a matching <code>id</code>, an extra matching-<code>id</code> <code>&lt;div&gt;</code> element will be generated and inserted into <code>body</code> - as a child of the root element of <code>body</code> and after any other content that&#8217;s already there.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pageContributions</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object: valid <a href="https://developer.enonic.com/docs/xp/stable/cms/contributions">XP page contributions</a></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>If you already have some page contributions you want to add to the output of this rendering, add them here. These added page contributions will be added <em>before</em> the ones that will be rendered (within each section <code>headBegin</code>, <code>bodyEnd</code> etc).</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>hydrate</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">boolean</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.hydrate'] or true</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>When SSR is true, choose whether you want hydration or not.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ssr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">boolean</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.ssr'] or true</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Switch between clientside and servierside rendering, on this particular rendering. Other renderings are not affected, even within the same controller or using the same entry more than once.</p>
</div>
<div class="paragraph">
<p>If <code>false</code> / falsy or omitted, you get serverside rendering and the returned object will contain an HTML representation of the react component with the initial <code>props</code>, and page contributions will make the client call <code>.hydrate</code>.</p>
</div>
<div class="paragraph">
<p>If <code>true</code> / truthy, the server-side rendering is skipped for this particular rendering. The client will call <code>.render</code>.</p>
</div>
<div class="paragraph">
<p>This <strong>only applies in live mode and previews</strong>: inside <em>edit</em> or <em>browse</em> modes in Content Studio, you still only get a static server-side rendered representation).</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>urlType</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">server | absolute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.urlType'] or server</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>URL type. Either server (server-relative URL) or absolute. Default is server. Available from <code>React4xp-5.1.0</code>.</p>
</div></div></td>
</tr>
</tbody>
</table></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="returns"><a class="link" href="#returns">Returns</a></h3>
<div class="paragraph">
<p>Returns an <a href="https://developer.enonic.com/docs/xp/stable/framework/http">XP response object</a> with these main attributes:</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Attribute</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>body</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string, rendered HTML</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>HTML output.</p>
</div>
<div class="paragraph">
<p>The root of this HTML is always a <strong>surrounding container</strong> HTML that will have a matching-ID <strong>target element</strong> in it somewhere (an element matching the ID of the clientside call to <code>.render</code> or <code>.hydrate</code>: that ID is <code>options.id</code> if that was set, or a generated unique one if not). This surrounding structure is <code>options.body</code>, unchanged if that already contained a matching-ID element, or with a new target element generated and inserted at the end if it didn’t have one. If there is no <code>options.body</code>, the surrounding container is just a generated target <code>&lt;div&gt;</code> element.</p>
</div>
<div class="paragraph">
<p>Inside that matching-ID element, there will be a serverside rendering of the entry (with the initial props from <code>options.props</code>) if <code>options.ssr</code> is not false.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pageContributions</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Regular <a href="https://developer.enonic.com/docs/xp/stable/cms/contributions">XP page contributions</a>. Includes everything the browser needs to activate (or client-side render) the react component: script tags with urls to auto-compiled assets for the entry and its dependencies, a client-side react4xp wrapper asset and an activating client-wrapper call. Urls point to React4xp&#8217;s own optimized asset services. Also included before this, are any input <code>options.pageContributions</code>.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="render_request"><a class="link" href="#render_request">Request and automated behavior</a></h3>
<div class="paragraph">
<p><code>.render</code> is intended to be convenient to work with and safely wrap around some common corner cases. It automates a little bit of behavior, depending on the <code>request</code> object argument (which stems from the XP controller):</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="render_with_request"><a class="link" href="#render_with_request"><code>render</code> with <code>request</code>:</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">React4xp.render(entry, props, request);
React4xp.render(entry, props, request, options); // ...etc etc</code></pre>
</div>
</div>
<div class="paragraph">
<p>If <code>request</code> is supplied, viewing context is detected from <code>request.mode</code>: is rendering happening inside or outside of Content Studio edit mode?</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Inside Content Studio edit mode</strong>, <code>.render</code> will always select serverside rendering (no matter what <code>ssr</code> is) and skip JS dependency assets and the clientside <code>render</code>/<code>hydrate</code> trigger (but still still supply other dependencies, such as CSS). This ensures that a static HTML placeholder rendering is visible inside Content Studio&#8217;s edit mode, but keeps react from being activated. This is by design: preventing the possibility that react code might intervene with the UX of Content Studio itself.</p>
</li>
<li>
<p><strong>Outside Content Studio edit mode</strong>, the rendering will be activated as a react app (i.e. all pageContributions are rendered). Also, <code>ssr</code> is used, so if this is <code>false</code>, serverside rendering is skipped. The <code>`and `render</code> is called in the client instead of <code>hydrate</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Also, when <code>request</code> is used, <code>.render</code> will output <strong>error messages from SSR</strong> in error containers and browser consoles (except in live view mode, where error containers and browser log are more generic: shown without the specific messages).</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="render_without_request"><a class="link" href="#render_without_request"><code>render</code> without <code>request</code>:</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">React4xp.render(entry, props);
React4xp.render(entry, props, null);
React4xp.render(entry, props, undefined, options); // ...etc etc</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Omitting <code>request</code> from <code>render</code> has the effect of always rendering as if it&#8217;s inside Content Studio</strong> (see above). Again, this is by design - trying to make sure that a viewable and safe rendering is always returned, even when viewing context can&#8217;t be determined.</p>
</div>
<div class="paragraph">
<p>However, it also means that <code>hydrate</code> and <code>ssr</code> options are ignored (you always get SSR without Hydration), and there is no call to activate the react app in the browser. Basically, it&#8217;s as if TSX/JSX is used as a pure, static HTML templating language (same as XP&#8217;s Thymeleaf renderer - which shares the same basic signature).</p>
</div>
<div class="paragraph">
<p>When <code>request</code> is omitted, <code>.render</code> will <strong> never output error messages from SSR</strong> in error containers or browser console.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="examples"><a class="link" href="#examples">Examples</a></h3>
<div class="paragraph">
<p>Most of the lessons in the guide use <code>React4xp.render</code> (except the "custom flow" ones). For example <a href="hello-react.ahtml#first_helloreact_jsx">here</a> or <a href="pages-parts-and-regions.ahtml#color_part_controller">here</a>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="react4xp_object"><a class="link" href="#react4xp_object">React4xp object: custom flow</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>More flexible and controllable than <code>React4xp.render</code>: create a data-holding react4xp object with the React4xp contructor, manipulate it or extract data from it, combine with other objects, and then later render it to an HTML body string and/or page contributions, separately. This is actually what <code>React4xp.render</code> does behind the scenes.</p>
</div>
<div class="paragraph">
<p>Call the two rendering methods from the same react4xp object. Remember, if using <code>hydrate</code>, <code>ssr</code> and/or <code>request</code> options, they should usually be the same value across the two corresponding calls. A typical (compact) usage example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">exports.get = function(request) =&gt; {

    // Object constructor:
    const myComponent = new React4xp('my-entry');

    // ...read myComponent attributes and/or use its setter methods...

    // const ssr = ...true or false...

    // Call the rendering methods:
    return {
        body: myComponent.renderBody({
            // ssr, etc
            request
        }),
        pageContributions: myComponent.renderPageContributions({
            // hydrate, ssr, etc
            request
        })
    }; // ...etc, etc
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>See the <a href="custom-flow-syntax.ahtml">"custom flow syntax"</a> lesson to go more in depth.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="constructor"><a class="link" href="#constructor">Object constructor</a></h3>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const myComponent = new React4xp(entry);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Creates an initial react4xp data object from an entry.</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>entry</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string or component object, mandatory</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Reference to an <a href="entries.ahtml">entry</a>: the react component to be rendered. Direct <a href="jsxpath.ahtml">JsxPath</a> string, or a <code>portal.getComponent()</code> object. If you use a component object like that, the entry must be a TSX/JSX file with the <em>same name</em> in the <em>same folder</em> as the controller, and react4xp will try to generate an ID from the content.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><strong>Constructs</strong> a react4xp data object, which exposes the attributes and methods below:</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="main_object_attributes"><a class="link" href="#main_object_attributes">Main object attributes</a></h3>
<div class="paragraph">
<p>Extract from the object the data that has been generated or set in it.</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>react4xpId</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Target <code>id</code> of the HTML element the entry will be rendered into (if it&#8217;s been set yet - see <code>setId</code> and <code>uniqueId</code> below). Also identifies the object.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>jsxPath</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p><a href="jsxpath.ahtml">jsxPath</a> to the entry.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>props</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p><code>props</code> for the entry&#8217;s initial rendering. At the time of rendering, an attribute <code>react4xpId</code> is added to the props, allowing each entry to access its own unique ID at runtime.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const targetElementId = myComponent.react4xpId;</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="setter_methods"><a class="link" href="#setter_methods">Setter methods</a></h3>
<div class="paragraph">
<p>Use these to set the object&#8217;s properties. All of them are optional; if not used, the object will render with empty values or placeholders where needed, along the same logic as for <a href="#react4xp_render">React4xp.render</a> above.</p>
</div>
<div class="paragraph">
<p>All the setter methods <strong>return</strong> the data object itself, so that you can use a <strong>builder pattern</strong> where&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.firstSetter("a").secondSetter("b").thirdSetter("c");</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;is equivalent to:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.firstSetter("a");
myComponent.secondSetter("b");
myComponent.thirdSetter("c");</code></pre>
</div>
</div>
<div class="paragraph">
<p>The order between the setters doesn&#8217;t matter - except for <code>setId</code> and <code>uniqueId</code>, which affect each other.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="setprops"><a class="link" href="#setprops">.setProps</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.setProps(props);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Sets props for the entry.</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>props</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object, mandatory</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p><code>props</code> passed into the react component for initial rendering. JS object must be serializable (no functions can be passed).</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="set_id"><a class="link" href="#set_id">.setId</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.setId(id);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Sets an ID - directly and literally, so uniqueness is up to you. This ID both identifies this react4xp object (aka. <code>react4xpId</code>), and crucially, points React to an HTML element (in the <code>body</code> param, during <code>render</code> or <code>renderBody</code> later) which is the target container for rendering the entry into. Phew.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If <code>render</code> or <code>renderBody</code> are called without an ID having been set yet, then a unique random ID will be generated on the fly. This of course implies that there will be no matching-ID element in <code>body</code>. In cases like this (or when there&#8217;s no <code>body</code> at all), an empty target element with a matching ID will be generated/inserted, to contain the React rendering.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If the data object already has an ID, <code>.setId(id)</code> will overwrite it. If <code>id</code> is omitted/empty, <code>.setId()</code> just deletes any previous ID (which has the later effect of giving this a new, unique ID at the time of rendering).</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>id</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string, optional</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>ID of both the target HTML element and the data object itself.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="uniqueid"><a class="link" href="#uniqueid">.uniqueId</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.uniqueId();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Enforces a unique ID, either by itself or after running <code>.setId()</code>. If the object already has an ID (<code>react4xpId</code>), a random string will be added to it. If not, the ID will just be the random string.</p>
</div>
<div class="paragraph">
<p>No parameters.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="setjsxpath"><a class="link" href="#setjsxpath">.setJsxPath</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">myComponent.setJsxPath(jsxPath);</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you for some reason need to override the JsxPath that was set (or inferred from the component object) in the constructor.</p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>jsxPath</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string, mandatory</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>New <a href="jsxpath.ahtml">jsxPath</a> to a different entry.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rendering_methods"><a class="link" href="#rendering_methods">Rendering methods</a></h3>
<div class="paragraph">
<p>These methods perform specific rendering tasks independently, using the data object as a basis, the way it&#8217;s set up with the <a href="#setter_methods">setters</a> and with the entry from the <a href="#constructor">constructor</a> (or the <code>setJsxPath</code> setter).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Most of these rendering methods will lock down the jsxPath and ID if the react4xp data object, the first time one of them is run. After this, the setters will prevent these from being changed so that another conflicting rendering can&#8217;t be performed from the same data object.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="render_body"><a class="link" href="#render_body">.renderBody</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const responseBody = myComponent.renderBody(options);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similar to <a href="#react4xp_render">React4xp.render</a> above, but <code>renderBody</code> in itself <strong><em>only</em> renders a static HTML output</strong>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Does <em>not</em> render page contributions. Combine with a corresponding <a href="#render_pgcontr">renderPageContributions</a> call from the same data object, or the rendering will not be active in the browser.</p>
</div>
<div class="paragraph">
<p>&#8594; See the <a href="custom-flow-syntax.ahtml">custom flow syntax</a> examples.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><code>renderBody</code> renders based on the state of the data object reached at the time of rendering.</p>
</div>
<div class="paragraph">
<p>Just like <code>render</code> does, <code>renderBody</code> ensures that the output HTML will always contain a matching-ID target element for react-rendering/hydrating the entry into (in the browser). And if serverside rendering is switched on (that is, <code>ssr</code> is not false, or safe context-dependent rendering is enforced by adding <code>request</code> - <a href="#react4xp_object_request">see the summary</a>), the target element will contain the static HTML rendering.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect4">
<h5 id="parameters"><a class="link" href="#parameters">Parameters</a></h5>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>options</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object, optional</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Options to control the rendering, all of them optional:</p>
</div>
<table class="tableblock frame-ends grid-none stretch">
<caption class="title">Properties</caption>
<colgroup>
<col style="width: 1.0101%;">
<col style="width: 1.0101%;">
<col style="width: 4.0404%;">
<col style="width: 93.9394%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Default</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>body</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string: valid HTML</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;div&gt;</code> with matching <code>id</code> (same as <code>react4xpId</code> in the data object)</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Same as the <code>options.body</code> in <a href="#react4xp_render_parameters">React4xp.render</a> above.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ssr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">boolean</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.ssr'] or true</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Switch between clientside and servierside rendering, on this particular rendering.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>request</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://developer.enonic.com/docs/xp/stable/framework/http">XP request object</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Including this here (<em>and</em> in the corresponding <a href="#render_pgcontr"><code>renderPageContributions</code></a> call) is the easiest way to handle <a href="#react4xp_object_request">view-context dependent behavior</a>.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Other renderings are not affected, <em>even from the same data object</em> (so you usually want to make sure a different rendering from the same data object uses the same mode).</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect4">
<h5 id="returns_2"><a class="link" href="#returns_2">Returns</a></h5>
<div class="paragraph">
<p>Returns an HTML string ready to return as the <code>body</code> attribute in an <a href="https://developer.enonic.com/docs/xp/stable/framework/http#http-response">XP response object</a> from the controller.</p>
</div>
<div class="paragraph">
<p>The root of the returned HTML is always a <strong>surrounding container</strong> HTML that will have a matching-ID <strong>target element</strong> in it somewhere (an element matching the data object&#8217;s ID (<code>react4xpId</code>), either from the <a href="#set_id">ID setter methods</a>, or a generated ID if they haven&#8217;t been run). This surrounding structure is <code>options.body</code>, unchanged if that already contained a matching-ID element, or with a new target element generated and inserted at the end if it didn&#8217;t have one. If there is no <code>options.body</code>, the surrounding container is just a generated target element.</p>
</div>
<div class="paragraph">
<p>Inside that matching-ID element, there will be a serverside rendering of the entry (with the initial props from <code>.setProps</code>) if <code>options.ssr</code> is not false.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="render_pgcontr"><a class="link" href="#render_pgcontr">.renderPageContributions</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const outputPageContributions = myComponent.renderPageContributions(options);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similar to <a href="#react4xp_render">React4xp.render</a> above, but <em>only</em> renders the <a href="https://developer.enonic.com/docs/xp/stable/cms/contributions">page contributions</a> needed to run and activate the react component in the browser:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>references to the entry&#8217;s own asset,</p>
</li>
<li>
<p>dependency assets,</p>
</li>
<li>
<p>and the react-activating trigger call in the browser (<code>.render</code> or <code>.hydrate</code>, depending on the <code>hydrate</code>, <code>ssr</code> and <code>request</code> options).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Renders based on the state of the data object at the time of rendering.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Does <em>not</em> render any HTML. Run <code>.renderBody</code> from the same data object, or the browser may have nothing to activate / nowhere to render the entry.</p>
</div>
<div class="paragraph">
<p>Also, unless you add the <code>request</code> option, there is <strong>no detection of inside-vs-outside Content Studio</strong>, and consequently the client is <em>not</em> automatically prevented from running client-side code in Content Studio. That is not recommended - see <a href="#react4xp_object_request">the summary</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><strong>Parameters:</strong></p>
</div>
<table class="tableblock frame-none grid-none stretch">
<colgroup>
<col style="width: 1%;">
<col style="width: 1%;">
<col style="width: 98%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Parameter</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>options</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object, optional</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Options to control the rendering, all of them optional:</p>
</div>
<table class="tableblock frame-ends grid-none stretch">
<caption class="title">Properties</caption>
<colgroup>
<col style="width: 1.0101%;">
<col style="width: 1.0101%;">
<col style="width: 4.0404%;">
<col style="width: 93.9394%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Default</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pageContributions</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">object: valid <a href="https://developer.enonic.com/docs/xp/stable/cms/contributions">XP page contributions</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">empty object</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>If you already have some page contributions you want to add to the output of this rendering, add them here. These added page contributions will be added <em>before</em> the ones that will be rendered (within each section <code>headBegin</code>, <code>bodyEnd</code> etc).</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>hydrate</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">boolean</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.hydrate'] or true</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>When SSR is true, choose whether you want hydration or not.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ssr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">boolean</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">app.config['react4xp.ssr'] or true</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Switch between clientside and servierside rendering, on this particular rendering.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>request</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://developer.enonic.com/docs/xp/stable/framework/http">XP request object</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Including this here (<em>and</em> in the corresponding <a href="#render_body"><code>renderPageContributions</code></a> call) is the easiest way to handle <a href="#react4xp_object_request">view-context dependent behavior</a>.</p>
</div>
<div class="paragraph">
<p>Other renderings are not affected, <em>even from the same data object</em> (so you usually want to make sure a different rendering from the same data object uses the same mode).</p>
</div></div></td>
</tr>
</tbody>
</table></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><strong>Returns:</strong></p>
</div>
<div class="paragraph">
<p>A regular <a href="https://developer.enonic.com/docs/xp/stable/cms/contributions">XP page contributions</a> object, ready to be used as the <code>pageContributions</code> attribute in an <a href="https://developer.enonic.com/docs/xp/stable/framework/http#http-response">XP response object</a> from the controller.</p>
</div>
<div class="paragraph">
<p>Includes everything the browser needs to activate (or client-side render) the react component: script tags with urls to auto-compiled assets for the entry and its dependencies, a client-side react4xp wrapper asset and an activating trigger call to the client wrapper. Urls point to react4xp&#8217;s own optimized asset services. Also included before this, are any input <code>options.pageContributions</code>.</p>
</div>
<div class="paragraph">
<p>With a serverside rendering (<code>options.ssr</code> is not false), the client will expect an existing target element with a pre-rendered entry in the response <code>body</code>, and call <code>hydrate</code>. If <code>options.ssr</code> is false, an empty target element is expected in the response <code>body</code>, and the rendering is left to the client with <code>render</code>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="react4xp_object_request"><a class="link" href="#react4xp_object_request">Request and automated behavior</a></h3>
<div class="paragraph">
<p>The <a href="custom-flow-syntax.ahtml">"custom flow"</a> (<code>.renderBody</code> in tandem with <code>.renderPageContributions</code>) is intended as a more low-level approach: less hand-holding, more control to the developer for cases where that&#8217;s needed.</p>
</div>
<div class="paragraph">
<p>However, lib-react4xp version 1.6.0 introduced support for a <code>request</code> option parameter for these methods as well. The main idea is that <strong>using <code>request</code> in both calls will now automate some behavior</strong> the same way as calling <code>.render</code> with <code>request</code> (see <a href="#render_request">above</a>).</p>
</div>
<div class="paragraph">
<p>Omitting <code>request</code> will still work the same way as before, leaving more to developers.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="custom_flow_with_request"><a class="link" href="#custom_flow_with_request">Custom flow with <code>request</code></a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const body = myComponent.renderBody({
    // ssr, etc
    request
});
const pageContributions = myComponent.renderPageContributions({
    // hydrate, ssr, etc
    request
});
// ...etc, etc</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will act <a href="#render_request">the same way as <code>render</code> used with a request</a>: viewing context is detected, so inside Content Studio edit mode, <code>hydrate</code> and <code>ssr</code> are ignored and you always get SSR, and JS assets and the <code>.hydrate</code> call is held back so the react component isn&#8217;t activated inside Content Studio edit mode. And outside Content Studio edit mode, you get a fully active render.</p>
</div>
<div class="paragraph">
<p>As with <code>render</code>, error message details are held back in live view mode.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="custom_flow_without_request"><a class="link" href="#custom_flow_without_request">Custom flow without <code>request</code>:</a></h4>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const body = myComponent.renderBody({ /* ssr, etc */ });
const pageContributions = myComponent.renderPageContributions({ /* hydrate, ssr, etc */ });
// ...etc, etc</code></pre>
</div>
</div>
<div class="paragraph">
<p>Contrary to when working with <code>.render</code>, omitting <code>request</code> from the custom flow does <em>not</em> enforce a max-safety rendering. Quite the opposite, removing <code>request</code> will remove all the "safety wheels", so this rendering mode <strong>needs a bit of attention to guarantee that everything works everywhere</strong>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>.renderBody</code> will take <code>ssr</code> into account in all contexts. What you set it to <em>will</em> take effect.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This risks a missing/empty visualization inside Content Studio, since <code>ssr: false</code> makes sure no SSR will render a static placeholder.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>And <code>.renderPageContributions</code> will render <em>all</em> page contributions in all contexts, including JS dependency assets and the <code>hydrate</code>/<code>render</code> browser-side calls.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Best case scenario: this might make a client-side rendered entry visible in Content Studio too. Worst case, it risks intervening with Content Studio&#8217;s UX, or even break its functionality, depending on the code used/imported by the entry.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="custom_flow_examples"><a class="link" href="#custom_flow_examples">Custom flow examples</a></h3>
<div class="paragraph">
<p>Custom flow usage in is demonstrated <a href="custom-flow-syntax.ahtml">here</a>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="ssr"><a class="link" href="#ssr">SSR engine</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>The default running mode of React4xp is <a href="https://www.freecodecamp.org/news/demystifying-reacts-server-side-render-de335d408fe4/">serverside rendering (SSR)</a> (although <code>ssr</code> can override this).</p>
</div>
<div class="paragraph">
<p>In a nutshell, source files like TSX and JSX are compiled into JS assets that lib-react4xp&#8217;s SSR engine runs to render HTML. This output is then delivered to the browser along with dependency code (usually references to necessary assets like CSS, JS etc) - these dependencies are also rendered, as page contributions. Rendering the HTML body and the page contributions happens to two different steps, using either <a href="#react4xp_render"><code>render</code></a> (which wraps both steps for convenience) or the <a href="#react4xp_object">"custom flow"</a>.</p>
</div>
<div class="paragraph">
<p>The aim of react4xp is <a href="https://medium.com/capital-one-tech/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905">isomorphic rendering</a>: after the react component(s) are serverside rendered, they are activated (hydrated) in the browser, turning them into running, active react apps. It&#8217;s <em>the same react code</em> that runs at the server as in the browser: no need to write the same component twice - one for SSR and one for the browser (although occasionally, tweaks are needed to prevent browserspecific code from running on the server).</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="renderers"><a class="link" href="#renderers">Renderers</a></h3>
<div class="paragraph">
<p>Starting from version 1.5.0, react4xp handles multithreaded rendering. This is done by setting up a number of renderers where each one is ready to answer to rendering requests in parallel, independently.</p>
</div>
<div class="paragraph">
<p>The number of renderer workers is <a href="run_time.ahtml#ssrMaxThreads">determined in java but can be overriden</a>.</p>
</div>
<div class="paragraph">
<p>When a renderer runs into an error during SSR, that renderer is torn down and a new one is initialized (see warmup time below). This happens as far as possible during idle time.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="warmup"><a class="link" href="#warmup">Warmup time</a></h3>
<div class="paragraph">
<p>After your React4xp app is (re)started, the first time React4xp is triggered to render something, the engine will initialize. This means the renderers will load the <em>compiled assets</em> necessary for the rendering, into the engine memory:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>react and reactDOM (<code>globals.*.js</code>),</p>
</li>
<li>
<p>packages from <em>node_modules</em> (<code>vendors.*.js</code>),</p>
</li>
<li>
<p>dependency assets imported by the react components (aka. <a href="chunks.ahtml">chunks</a>),</p>
</li>
<li>
<p>and finally, the <a href="entries.ahtml">entry assets</a> themselves.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>This causes some warmup time</strong> when starting your app: a noticable delay before the first rendering shows up. This may be just a couple of seconds in total, but it may also take longer. It depends on the size and complexity of the <em>compiled</em> assets involved. This will happen on every restart of the app (and every <a href="#renderers">renderer</a> must be initialized, but they do this in parallel).</p>
</div>
<div class="paragraph">
<p>But as long as the code runs without errors, initialization happens only once (i.e. each asset is loaded once at most, on each renderer). After the warmup, the react apps are ready-to-run from memory, so repeated renderings after that (even with different props) are fast.</p>
</div>
<div class="sect3">
<h4 id="improving_warmup_time_for_development"><a class="link" href="#improving_warmup_time_for_development">Improving warmup time for development</a></h4>
<div class="paragraph">
<p>Since development can involve repeated app/server restarts, here is one way to improve initial loading time when developing large projects:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Don&#8217;t build React4xp components with <code>NODE_ENV = development</code>, but use <code>production</code> (which is the default - see <a href="config/build-time.ahtml#NODE_ENV">Build environment</a>). Assets built with <code>development</code> are much more verbose, and this size difference - although functionally equal - actually makes a difference.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>(Other optimizations and approaches are under consideration, to shorten the warmup time even more).</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="performance"><a class="link" href="#performance">SSR performance</a></h3>
<div class="paragraph">
<p>Apart from when assets are initialized during the engine <a href="#warmup">warmup</a>, each SSR should be fast. However, in cases where you need to improve SSR performance further, it can be done by wrapping the rendering in a <a href="https://developer.enonic.com/docs/cache-library/master">cache</a> in the controller.</p>
</div>
<div class="paragraph">
<p>Be sure to use any value that can change the rendering output - usually from <code>props</code> (and <code>options</code>?) or a subset of them - as a <strong>key</strong> in the cache.</p>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const cacheLib = require('/lib/cache');

// Set the cache up with a size that's reasonable
// for the most used props combinations
// and the size of the rendered output HTML string:
const cache = cacheLib.newCache({
    size:   100,
    expire: 3600
});


const makeKey = props =&gt; {
    // ...return a string that's reliably determined by the relevant values from props
};


exports.get = request =&gt; {
    const props = {
        // ... build props from whatever sources are needed
    };

    const key = makeKey(props);

    // Now render is only called when the key is new.
    // If the key is cached before, just returns the output for that key.
    return cache.get(
        key,
        () =&gt; React4xp.render(
            myEntry,
            props,
            request,
            options
        )
    );

};</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2023-10-03 13:10:19 UTC
</div>
</div>
</body>
</html>