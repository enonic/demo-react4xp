


/** Generates or modifies existing enonic XP pageContributions.js. Adds client-side dependency chunks (core React4xp frontend,
 * shared libs and components etc, as well as the entry component scripts.
 * Also returns/adds small scripts that trigger the component scripts. Prevents duplicate references to dependencies.
 *
 * @param pageContributions PageContributions object that the new scripts will be added to. If no input, new ones
 * are instantiated.
 */
renderHydrationPageContributions = (pageContributions) => {







/** Generates or modifies existing enonic XP pageContributions.js. Adds client-side dependency chunks (core React4xp frontend,
 * shared libs and components etc, as well as the entry component scripts.
 * Also returns/adds small scripts that trigger the component scripts. Prevents duplicate references to dependencies.
 *
 * @param pageContributions PageContributions object that the new scripts will be added to. If no input, new ones
 * are instantiated.
 */
renderClientPageContributions = (pageContributions) => {






/** Server-side rendering: Renders a static HTML markup and inserts it into an ID-matching target container in an HTML body. If a
 * matching-ID container (or a body) is missing, it will be generated.
 * @param body {string} Existing HTML body, for example rendered from thymeleaf.
 * @returns {string} adjusted or generated HTML body with rendered react component.
 */
renderSSRIntoContainer(body) {







/** Generates or modifies an HTML body, with a target container whose ID matches this component's react4xpId.
 * @param body {string} Existing HTML body, for example rendered from thymeleaf.
 *     If it already has a matching-ID target container, body passes through unchanged (use this option and the
 *     setId method to control where in the body the react component should be inserted). If it doesn't have a
 *     matching container, a matching <div> will be inserted at the end of the body, inside the root element. If
 *     body is missing, a pure-target-container body is generated and returned.
 * @param content {string} HTML content that, if included, is inserted into the container with the matching Id.
 * @returns {string} adjusted or generated HTML body with rendered react component.
 */
renderTargetContainer(body, content) {





/** Renders a pure static HTML markup of ONLY the react component, without a surrounding HTML markup or container.
  * Can override props that have previously been added to this component.
  */
renderComponentString = (overrideProps) =>




--------------------------------------------





/** When you want to use a particular JSX file (other than the default, a JSX file in the same folder as the XP component,
  * with the same name as the folder).
  *
  * @param jsxPath (string, mandatory) Name of a JSX file, will be interpreted as a full, absolute JSX path. NOTE
  *        that these are component NAME strings, not file paths that can be relative. So avoid stuff like "..", "//", "./", etc.
  *        After building the parent project with react4xp-build-components,
  *        the available entry jsxPaths can be seen in build/main/resources/react4xp/entries.json.
  *
  * @returns The React4xp object itself, for builder-like telescoping pattern.
  */
setJsxPath(jsxPath) {






/** Sets the react4xpId - the HTML ID of the target container this component will be rendered into.
  * Deletes the ID if argument is omitted.
  * @returns The react4xp component itself, for builder-like telescoping pattern.
  */
setId(react4xpId) {






/** Appends a unique target container ID postfix after the currently set reactXpId (if any).
  * @returns The react4xp component itself, for builder-like telescoping pattern.
  */
uniqueId() {





/** Sets the react4xp component's top-level props.
  * @param props {object} Props to be stored in the component. Must be a string-serializeable object!
  * @returns The react4xp component itself, for builder-like telescoping pattern.
  */
setProps(props) {


