<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>Imports, chunks, config, webpack</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child{border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active,#footnotes .footnote a:first-of-type:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Imports, chunks, config, webpack</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#lesson_overview">Lesson overview</a></li>
<li><a href="#the_multi_color_part">The <em>multi-color</em> Part</a>
<ul class="sectlevel2">
<li><a href="#part_definition">Part definition</a></li>
<li><a href="#part_controller">Part controller</a></li>
</ul>
</li>
<li><a href="#the_multicolor_entry">The <em>MultiColor</em> entry</a>
<ul class="sectlevel2">
<li><a href="#react_component">React component</a></li>
<li><a href="#dependencies_for_the_entry">Dependencies for the entry</a>
<ul class="sectlevel3">
<li><a href="#styling">Styling</a></li>
<li><a href="#imported_react_components">Imported react components</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#webpack_config">Configuring React4xp and webpack</a>
<ul class="sectlevel2">
<li><a href="#folders_for_entries_and_chunks">Folders for entries and chunks</a></li>
<li><a href="#webpack_rules">Adding webpack rules</a>
<ul class="sectlevel3">
<li><a href="#npm_dependencies">NPM dependencies</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#setup_and_rendering">Setup and rendering</a></li>
<li><a href="#output">Output</a></li>
<li><a href="#further_reading">Further reading</a></li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="lesson_overview"><a class="link" href="#lesson_overview">Lesson overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This final example is going to be more real-life-like. We&#8217;ll focus on these features:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Using an entry from a <strong>myEntries</strong> folder outside of the <em>site/</em> structure</p>
</li>
<li>
<p>Letting the entry itself <strong>import and nest its own react components</strong>.</p>
</li>
<li>
<p>Importing those secondary assets from a shared non-entry folder, and marking that folder so everything in it is turned into a separate bundle - a <strong>dependency chunk</strong>. These chunks are repeatedly-used, effectively-cached and rarely-downloaded "library assets" of shared secondary components. They&#8217;re meant to take care of bigger stuff while keeping the footprint of the entry small (while still automatically compiled and tracked by React4xp).</p>
</li>
<li>
<p>The react components import some styling from <code>scss</code> files, which React4xp doesn&#8217;t support by default: So we&#8217;ll see how to <strong>add custom webpack config</strong>.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">site/parts/
    multi-color/
        multi-color.ts
        multi-color.xml

react4xp/
    myEntries/
        MultiColor.scss
        MultiColor.tsx
    shared/
        ActiveColorOval.scss
        ActiveColorOval.tsx
        Button.scss
        Button.tsx
        ColorButtons.scss
        ColorButtons.tsx
        shared-styles.scss

react4xp.config.js
webpack.config.react4xp.js</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, there are more moving parts than before to coordinate here, so we&#8217;ll divide the code into <strong>three sections</strong>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>an XP part at the core of things, fetching editorial data from XP and inserting it into a React4xp entry - as before,</p>
</li>
<li>
<p>the entries and imported assets under <em>react4xp/</em>,</p>
</li>
<li>
<p>and adaptations to the React4xp config, which will enable webpack handling of styles and enable the Part controller to find and use the entry and its imports the way we want.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="the_multi_color_part"><a class="link" href="#the_multi_color_part">The <em>multi-color</em> Part</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Starting out with the <em>multi-color</em> Part at the core of it all, everything in this section will probably be familiar by now.</p>
</div>
<div class="sect2">
<h3 id="part_definition"><a class="link" href="#part_definition">Part definition</a></h3>
<div class="paragraph">
<p>The Part definition enables two editorial configurations:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/multi-color/multi-color.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">## include::../src/main/resources/site/parts/multi-color/multi-color.xml[]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>a checkbox for making the entry serverside or clientside rendered,</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>and an array of colors where a user in Content Studio can add any number of HTML-compliant color tags.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="part_controller"><a class="link" href="#part_controller">Part controller</a></h3>
<div class="paragraph">
<p>For the Part controller, we don&#8217;t need any more than this in this example:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/multi-color/multi-color.ts:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">## include::../src/main/resources/site/parts/multi-color/multi-color.ts[]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Taking the serverside-rendering checkbox from the Part&#8217;s config, and turning it into a <code>ssr</code> flag that&#8217;s sent into the <em>options</em> argument <a href="hello-react.ahtml#_client_side_rendering">just like before</a>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creating a <code>colors</code> array of the color names from the Part&#8217;s config, trimming them and removing empty ones. This is passed into the <em>props</em> argument <a href="editorial-data-and-props.ahtml">like before</a>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This argument is slightly different compared to previously. <code>"MultiColor"</code> is a <a href="appendix/jsxpath.ahtml">jsxPath</a> to an entry, as you&#8217;d expect. But why does it look so&#8230;&#8203; naked? Where does it point to? As we&#8217;ll see <a href="#webpack_config">in a moment</a>, we&#8217;ll set up React4xp to look for entries below an <code>entryDir</code> in React4xp.config.js: <em>src/main/resources/react4xp/myEntries/</em>. Since a jsxPath is relative to the closest parent <code>entryDir</code> and we&#8217;ll put an entry <em>MultiColor.tsx</em> at the root of <em>entries/</em>, the jsxPath becomes just the clean file name.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="the_multicolor_entry"><a class="link" href="#the_multicolor_entry">The <em>MultiColor</em> entry</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before we do the React4xp / webpack configuration, we&#8217;ll make <strong>the <em>MultiColor.jsx</em> entry</strong> and its dependencies.</p>
</div>
<div class="paragraph">
<p>This is a more complex entry than before (and the most complex part of this example) - it&#8217;s composed of main react code that <strong>imports secondary dependencies</strong>.</p>
</div>
<div class="sect2">
<h3 id="react_component"><a class="link" href="#react_component">React component</a></h3>
<div class="paragraph">
<p>This is a <strong>stateful</strong> react component that not only <strong>imports and nests secondary react components</strong>, but also imports <strong>styling</strong> - both its own specific and shared general styling - and relies on webpack and React4xp to handle all the compilation and assets behind the scenes.</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/myEntries/MultiColor.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">## include::../src/main/resources/react4xp/myEntries/MultiColor.tsx[]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The entry imports some secondary react components for nesting later. These imports have nothing to do with React4xp&#8217;s <a href="appendix/jsxPath.ahtml">jsxPaths</a>, this is <strong>regular ES6 module importing</strong> and will be handled by webpack at compile time and served to the client at runtime. Basically any react component can be imported from anywhere here, including other entries. In this case we&#8217;re referring to components below a different folder, <em>shared/</em>, which we will <a href="#webpack_config">later</a> mark as a <strong>chunk directory</strong> instead of an entry directory. <em>Shared/</em> is not below <em>entries/</em> (but adjacent to it), so these imported react components will not be entries, just secondary react components and not reachable with <code>React4xp.render</code>. As you will see, this <strong>folder separation</strong> is also important for the compiled outcome: the entry, <em>MultiColor.jsx</em>, will be compiled into <em>r4xAssets/MultiColor.js</em>, but <strong>imported components</strong> like this will be collected inside a common <strong>dependency chunk</strong>: <em>r4xAssets/shared.&lt;HASH&gt;.js</em>. React4xp and webpack track the dependency connections between an entry and all its required chunks - so <code>React4xp.render</code> automatically generates asset-loading page contributions from the controller. The outcome: when the webpack rules are set up correctly later, <strong>imports like this in entries rendered by React4xp are all that&#8217;s needed to connect the entries to the additional assets they might need</strong>: no manual url handling in the controller or thymeleaf views etc. Dependency chunks are also  optimized for repeated use (more details on <a href="appendix/chunks.ahtml">dependency chunks</a>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This applies to styling too. Here, the entry imports some specific styling of its own, from a SASS file in the <em>entries/</em> folder. This import is webpack-centric syntax too: the SASS in <em>MultiColor.scss</em> is compiled to the asset <em>r4xAssets/Multicolor.css</em>, and automatically added when using this entry (of course, there&#8217;s more than one way to handle styling in webpack, this is just one working example).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Another SASS styling import, this time not from the same folder but from the <em>shared/</em> folder. Just like with compiled JS chunks, all imported styling below <em>shared/</em> will be compiled into the dependency chunk <em>r4xAssets/shared.&lt;HASH&gt;.css</em> - again automatically handled.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Unlike previous examples, this is an old-school stateful react Component with class syntax. See also (13).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The <code>selected</code> state attribute keeps track of which of the colors is currently selected, by index number in the <code>props.colors</code> array. In regular react fashion, each time this is changed the component is re-rendered.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This makes the whole <code>MultiColors</code> class available as <code>this</code> also inside the functions <code>shiftUp</code> and <code>shiftDown</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td><code>shiftUp</code> and <code>shiftDown</code> change the <code>selected</code> state attribute, increasing/decreasing it by 1 and wrapping around the array edges.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>If no colors have been added editorially, the part just displays an <em>"Add some color!"</em> paragraph. (12). Otherwise, the actual active content is rendered:</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Two buttons, increasing and decreasing the selected color. This uses the imported <code>Button</code> component from (1) twice. Two different labels and onClick functions are mapped to them, and they are both given a <code>my-button</code> HTML class for styling.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The import <code>ActiveColorOval</code> is given the currently selected color string, and displays it in an elliptic label on the page.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Next, a list of buttons collected in a <code>ColorButtons</code> component. It&#8217;s given the list of colors and the currently selected index (5), as well as a function that changes the selection index. All in all: click the a color&#8217;s button to select it.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>The fallback rendering if no colors have been added (5).`</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>Remember that <a href="appendix/entries.ahtml#_how_to_make_an_entry">entries need to export a function</a>: <code>(props?) &#8658; react component</code>. Since this component is written in the class syntax (4), it needs to be wrapped like this for export.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="dependencies_for_the_entry"><a class="link" href="#dependencies_for_the_entry">Dependencies for the entry</a></h3>
<div class="sect3">
<h4 id="styling"><a class="link" href="#styling">Styling</a></h4>
<div class="paragraph">
<p>Now, with the entry done, we can look at the <strong>entry&#8217;s styling</strong> - a lot simpler, only the buttons' class <code>my-button</code> is targeted and styled:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/myEntries/MultiColor.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">## include::../src/main/resources/react4xp/myEntries/MultiColor.scss[]</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Moving on to the <em>shared/</em> folder</strong>, this is where we find source files that will be compiled into common assets: dependency chunks with the <em>"shared"</em> prefix and a content-dependent <em>"&lt;HASH&gt;"</em> (reminder: this will happen because we later will mark <em>shared/</em> as a <code>chunkDir</code> in <em>react4xp.properites</em>).</p>
</div>
<div class="paragraph">
<p>First, some <strong><em>shared-styles.scss</em></strong>, also imported by the entry <em>MultiColor.jsx</em>. This could for example serve as common, normalizing styling imported by many react components across wide parts of a site:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/shared-styles.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">## include::../src/main/resources/react4xp/shared/shared-styles.scss[]</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="imported_react_components"><a class="link" href="#imported_react_components">Imported react components</a></h4>
<div class="paragraph">
<p>Next, <em>shared/</em> also contains the <strong>secondary react components</strong> imported by  <em>MultiColor.jsx</em>. Note how each of them imports their own specific styling the same way as the entry <em>MultiColor.jsx</em>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
It&#8217;s important that these react components are <strong>not <a href="appendix/entries.ahtml">entries</a></strong> themselves. They are only imported by the MultiColor entry - hence the folder name <em>shared/</em>.
</td>
</tr>
</table>
</div>
<div class="sect4">
<h5 id="button"><a class="link" href="#button">Button</a></h5>
<div class="paragraph">
<p>There&#8217;s the generic <strong>Button</strong> component. This is used both by <em>MultiColor.jsx</em> and the secondary component <em>ColorButtons.jsx</em>. It gets custom onClick function, HTML class, inline styling (for single-button-specific attributes) and label (<code>children</code>) from <code>props</code> (the spread-out function parameters):</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/Button.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">## include::../src/main/resources/react4xp/shared/Button.tsx[]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The specific Button styling it imports is marginal - this is just a generic button, so most of the styling is left to the class it&#8217;s given, or inline attributes:</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/Button.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">## include::../src/main/resources/react4xp/shared/Button.scss[]</code></pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="activecoloroval"><a class="link" href="#activecoloroval">ActiveColorOval</a></h5>
<div class="paragraph">
<p>Then there&#8217;s the <strong>ActiveColorOval</strong> component, which just displays <code>props.color</code> inside a circle/ellipse thing, filled with the same color:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/ActiveColorOval.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">## include::../src/main/resources/react4xp/shared/ActiveColorOval.tsx[]</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/ActiveColorOval.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">## include::../src/main/resources/react4xp/shared/ActiveColorOval.tsx[]</code></pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="colorbuttons"><a class="link" href="#colorbuttons">ColorButtons</a></h5>
<div class="paragraph">
<p>And finally a <strong>ColorButtons</strong> component. It takes the list of <code>props.colors</code> (from the editorial data), and assigns each of them to a <code>Button</code> labeled with the color, each of them triggering the change-color-selection from <em>MultiColor.jsx</em> with its own specific color index <code>i</code> in the list of colors. In addition, the HTML class name(s) of the buttons is assigned dynamically: the buttons all have a <code>color-button</code> class, and each item checks if its own array index <code>i</code> matches the current <code>selectedIndex</code>. If it does, the class <code>selected</code> is added, making that button differently styled:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/ColorButtons.tsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-typescript" data-lang="typescript">## include::../src/main/resources/react4xp/shared/ColorButtons.tsx[]</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">src/main/resources/react4xp/shared/ColorButtons.scss:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-sass" data-lang="sass">## include::../src/main/resources/react4xp/shared/ColorButtons.scss[]</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="webpack_config"><a class="link" href="#webpack_config">Configuring React4xp and webpack</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this section we&#8217;ll adjust some settings to make the code above work.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
If you need more details, some of this is covered in more depth under <a href="appendix/entries.ahtml">entries</a> and <a href="appendix/jsxpath.ahtml">jsxPaths</a>.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="folders_for_entries_and_chunks"><a class="link" href="#folders_for_entries_and_chunks">Folders for entries and chunks</a></h3>
<div class="paragraph">
<p>First, open <em>react4xp.config.js</em> in your project root and add/look up the attributes <code>entryDirs</code> and <code>chunkDirs</code>. Make sure <code>myEntries</code> are added as an <code>entryDir</code> and <code>shared</code> is added as a <code>chunkDir</code>.</p>
</div>
<div class="listingblock">
<div class="title">react4xp.config.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-js" data-lang="js">entryDirs: 'myEntries'   <i class="conum" data-value="1"></i><b>(1)</b>

chunkDirs: 'shared'    <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>entryDirs</code> is a list of where React4xp will look for source files to compile and serve as entries: in this case <em>src/main/resource/react4xp/myEntries</em>. This list is <strong>in addition</strong> to XP&#8217;s <em>site/</em> folder - <em>site/</em> always acts as a sort of default, special-case entryDir: under <em>site/</em> only .TSX/.JSX files are picked up as entries, while in all other entryDirs, .TS, .ES6 and .JS are picked up as well.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>chunkDirs</code> is a list of folders that will be turned into collection/library assets (dependency chunks): in this case <em>src/main/resource/react4xp/shared</em>. One chunk asset for each file type in each chunkDir, named after the chunkDir. If a different name is already here: <code>entryDirs: ['entries', 'myEntries']</code> works fine.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>So in our example here, TSX/JSX files under <em>myEntries/</em> are available to <code>React4xp.render</code> and friends, in XP controllers. Each entry becomes an asset file in itself.</p>
</div>
<div class="paragraph">
<p>And everything they import from under <em>shared/</em> and that is compiled into JS (both react and otherwise), will be collected into the chunk <code>shared.&lt;HASH&gt;.js</code> - and everything under <em>shared/</em> that&#8217;s compiled into CSS (our SASS, for example) is collected into <code>shared.&lt;HASH&gt;.css</code>. And so on.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Both <code>entrydirs</code> and <code>chunkDirs</code> are <strong>lists of relative paths</strong>. They are relative to <em>src/main/resource/react4xp/</em>.</p>
</div>
<div class="paragraph">
<p>Adding paths like e.g. <code>foo/bar/baz</code> or <code>../../hey/ho/lets/go</code> is perfectly fine (<em>src/main/resource/react4xp/foo/bar/baz</em> and <em>src/main/hey/ho/lets/go</em>, respectively).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="webpack_rules"><a class="link" href="#webpack_rules">Adding webpack rules</a></h3>
<div class="paragraph">
<p>Next, we&#8217;ll add some <strong>custom webpack rules to handle the style imports</strong>.</p>
</div>
<div class="listingblock">
<div class="title">webpack.config.react4xp.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">//──────────────────────────────────────────────────────────────────────────────
// Use this file to adjust the webpack config.
//──────────────────────────────────────────────────────────────────────────────
// A template version of this, with upated properties and explanations,
//  can always be found in the react4xp NPM package:
//   node_modules/react4xp/examples/webpack.config.react4xp.js after installing,
//  or:
//   https://github.com/enonic/enonic-react4xp/blob/master/examples/webpack.config.react4xp.js
//──────────────────────────────────────────────────────────────────────────────
// const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const rspack = require('@rspack/core');

module.exports = function(env, config) {

	// Comment in and customize the lines below to improve incremental builds in
	// development mode. (see https://webpack.js.org/configuration/cache/)
	//
	// if (process.env.NODE_ENV === 'development') {
	// 	config.cache = {
	// 		type: 'filesystem'
	// 	}
	// }

	// This makes 'npm link' symlinks in node_modules work:
	config.resolve.symlinks = true;

	config.module.rules = [
		...(config.module.rules || []),
		{
			test: /\.((sa|sc|c))ss$/i,
			use: [
				// MiniCssExtractPlugin.loader,
				rspack.CssExtractRspackPlugin.loader,
				{
					loader: 'css-loader',
					options: {
						importLoaders: 1,
						modules: { auto: true },
						esModule: false
					}
				},
				{
					loader: 'sass-loader',
					options: {
						sassOptions: {
							outputStyle: 'compressed'
						}
					}
				}
			]
		},
		{
			test: /\.(woff|woff2|eot|ttf|otf)$/i,
			type: 'asset/resource', // ends up as auxiliaryAssets in stats.components.json
		},
	]

	// Set up how the compiled assets are exported:
	config.plugins = [
		...(config.plugins || []),
		// new MiniCssExtractPlugin({
		// 	filename: '[name].[contenthash:9].css',
		// 	chunkFilename: '[id].[contenthash:9].css'
		// }),
		new rspack.CssExtractRspackPlugin({
			chunkFilename: '[id].[contenthash:9].css',
			filename: '[name].[contenthash:9].css',
		})
	]

	return config;
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Currently, the whole file <strong>must export a function</strong> where the arguments are a standard webpack <code>env</code> object, and <code>config</code> which is the existing webpack config object from React4xp.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>That function may <strong>mutate (or replace!) the React4xp webpack <code>config</code> object</strong> (on this line and later: "take any incoming <code>config.module.rules</code> and add this style-compilation-rule object"). So previously existing attributes will be overwritten by the new ones from this file.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The function <strong>must return the changed (or replaced) config object</strong>.</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="npm_dependencies"><a class="link" href="#npm_dependencies">NPM dependencies</a></h4>
<div class="paragraph">
<p>Also, you&#8217;ll probably need to add the required NPM packages for this example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-bash" data-lang="bash">npm install -D css-loader@3 node-sass@4 mini-css-extract-plugin sass-loader@8</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we&#8217;re ready to look at it running!</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="setup_and_rendering"><a class="link" href="#setup_and_rendering">Setup and rendering</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Build again and add the <em>multi-color</em> Part in Content Studio, <a href="pages-parts-and-regions.ahtml#adding_parts_to_new_content">the same way as before</a>.</p>
</div>
<div class="paragraph">
<div class="title">Empty multicolor Part:</div>
<p><span class="image"><img src="media/multicolor-add.png" alt="multicolor add" width="720px" title="Empty MultiColor part in Content Studio"></span></p>
</div>
<div class="paragraph">
<p>Click it in edit mode to edit the Part config. Here you can choose to render the part in serverside or clientside mode, as well as enter any number of colors. As long as they are <a href="https://en.wikipedia.org/wiki/Web_colors">standard web colors</a>, they will create an array of colored buttons.</p>
</div>
<div class="paragraph">
<div class="title">Multicolor Part with colors filled in:</div>
<p><span class="image"><img src="media/multicolor-added.png" alt="multicolor added" width="720px" title="MultiColor part in Content Studio, with four colors added"></span></p>
</div>
<div class="paragraph">
<p>Outside of Content Studio, in the preview, the buttons are of course active and clickable. Each button selects itself, the Previous/Next buttons cycle through them, and the little elliptic label (the ActiveColorOval) is updated with both text and color:</p>
</div>
<div class="paragraph">
<div class="title">Multicolor Part, active view:</div>
<p><span class="image"><img src="media/multicolor-preview.png" alt="multicolor preview" width="720px" title="MultiColor part outside of Content Studio, active view after clicking the #5d0015 button"></span></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="output"><a class="link" href="#output">Output</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s take a look at the rendered response from the controller and underline a few things that by now might be as you expected:</p>
</div>
<div class="listingblock">
<div class="title">Page source from the Multicolor Part, active view (serverside rendered not selected):</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;MultColor&lt;/title&gt;

        <i class="conum" data-value="1"></i><b>(1)</b>
        &lt;link href="(...your.app.service) react4xp/shared.css" rel="stylesheet" type="text/css" /&gt;
        &lt;link href="(...your.app.service) react4xp/MultiColor.css" rel="stylesheet" type="text/css" /&gt;

        <i class="conum" data-value="2"></i><b>(2)</b>
        &lt;script defer src="(...your.app.service) react4xp/globals.4427e5cbb5e9bb528fc6.js"&gt;&lt;/script&gt;
        &lt;script defer src="(...your.app.service) react4xp/runtime.706073d99846f9d14ca4.js"&gt;&lt;/script&gt;
        &lt;script defer src="(...your.app.service) react4xp/shared.14922ab45e4fcedcf48c.js"&gt;&lt;/script&gt;
        &lt;script defer src="(...your.app.service) react4xp/MultiColor.9e3da441a88937e84fe3.js"&gt;&lt;/script&gt;
        &lt;script defer src="(...your.app.service) react4xp/client-QZN5J5VC.global.js"&gt;&lt;/script&gt;

        <i class="conum" data-value="3"></i><b>(3)</b>
        &lt;script data-react4xp-app-name="com.enonic.app.samples_react4xp" data-react4xp-ref="r4x-ijmu1r1k" type="application/json"&gt;{"command":"render","devMode":false,"hasRegions":0,"isPage":0,"jsxPath":"MultiColor","props":{"colors":["Red","Khaki","#c0ffee","#5d0015"]}}&lt;/script&gt;&lt;/head&gt;

    &lt;/head&gt;

    &lt;body class="xp-page"&gt;
        &lt;div id="react4xp_453f84f9-043f-4376-89fc-93855501e063"&gt;
            &lt;div class="default-page" data-reactroot=""&gt;
                &lt;div data-portal-region="main" class="xp-region"&gt;

                    <i class="conum" data-value="3"></i><b>(3)</b>
                    &lt;div data-portal-component-type="part" id="_67815286"&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        <i class="conum" data-value="3"></i><b>(3)</b>
        &lt;script defer src="(...your.app.service) react4xp/executor-BL4RRDZO.js"&gt;&lt;/script&gt;    <i class="conum" data-value="4"></i><b>(4)</b>
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Firstly, the SASS files have all been compiled to .CSS assets, and stylesheet links to them are inserted into the header by <code>React4xp.render</code> (if we had used the <a href="custom-flow-syntax.ahtml">custom flow syntax</a>, this would have been handled by <code>.renderPageContributions</code>). And secondly: while <code>MultiColor.scss</code> was compiled into a .CSS file by itself (because the source file is under the entryDir <em>entries/</em>), we see that all the other imported assets have been compiled into the common dependency chunk <em>shared.&lt;HASH&gt;.css</em> (<em>not</em> because they were imported by .JSX files under <em>shared/</em> - the import location doesn&#8217;t matter. But because the .SCSS source files were under <em>shared/</em>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Among the dependencies are still the globals, the client wrapper code and the code to the compiled MultiColor entry. And in addition, there&#8217;s the <code>shared.&lt;HASH&gt;.js</code> dependency chunk, containing the compiled code for all the TS/TSX/JS/JSX found under the <em>shared/</em> folder.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Again, since we didn&#8217;t check the "Server-side rendering" checkbox, the <code>ssr</code> flag became false and we got a clientside rendering. So this is just the target container element, filled in by the browser on <code>render</code>. Had we checked the checkbox, this would have contained the pre-rendered MultiColor entry, of course.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The script that actually runs <code>render</code> with the <code>props</code> on the clientside.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>And that&#8217;s all in this chapter!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="further_reading"><a class="link" href="#further_reading">Further reading</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you haven&#8217;t already, it&#8217;s recommended to take a look at the additional explanations of central concepts and API, in the documentation below - especially the dependency chunks which are used for optimization, as we touched upon in this chapter:</p>
</div>
<div class="paragraph">
<p>&#8594; <a href="appendix/entries.ahtml">Entries</a></p>
</div>
<div class="paragraph">
<p>&#8594; <a href="appendix/jsxpath.ahtml">JsxPath</a></p>
</div>
<div class="paragraph">
<p>&#8594; <a href="appendix/chunks.ahtml">Dependency chunks</a></p>
</div>
<div class="paragraph">
<p><a href="appendix/api.ahtml">API</a> reference:</p>
</div>
<div class="paragraph">
<p>&#8594; <a href="appendix/api.ahtml#react4xp_render">React4xp.render</a></p>
</div>
<div class="paragraph">
<p>&#8594; <a href="appendix/api.ahtml#react4xp_object">React4xp data objects</a></p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2025-05-06 12:47:31 UTC
</div>
</div>
</body>
</html>